<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Github图床搭建</title>
      <link href="2020/10/26/github%E5%9B%BE%E5%BA%8A%E6%90%AD%E5%BB%BA/"/>
      <url>2020/10/26/github%E5%9B%BE%E5%BA%8A%E6%90%AD%E5%BB%BA/</url>
      
        <content type="html"><![CDATA[<p>由于平时在写markdown文档时会引用很多的图片，但是图片是不可以直接粘贴上去的，所以我一般都要把图片放在一个文件夹里面，再导入图片。这样做比较繁琐，而且还存在如果我修改了路径，图片就不显示的问题。<br> 于是就发现了这个神器——<strong>PicGo</strong></p><h3 id="1、先下载个PicGo，如下"><a href="#1、先下载个PicGo，如下" class="headerlink" title="1、先下载个PicGo，如下"></a>1、先下载个PicGo，如下</h3><p><a href="https://share.weiyun.com/mSUFa7MN">传送门</a></p><h3 id="2-安装软件，打开软件，图床设置"><a href="#2-安装软件，打开软件，图床设置" class="headerlink" title="2 安装软件，打开软件，图床设置"></a><strong>2 安装软件，打开软件，图床设置</strong></h3><p> 图床设置有很多种方法，这里使用的是Github图床</p><p><img src="https://raw.githubusercontent.com/wind-qin/MyPicture/master/D%3A%5Cimg20201026145854.png" alt="在这里插入图片描述"></p><h3 id="3-Github图床设置项"><a href="#3-Github图床设置项" class="headerlink" title="3 Github图床设置项"></a><strong>3 Github图床设置项</strong></h3><p> 必须填写的有三项，仓库名、分支名、Token。其中分支名一般填写master，仓库名的格式为你的github的“用户名/仓库名”，Token是新建仓库后自动生成的。（下一步会讲到）</p><p><img src="https://raw.githubusercontent.com/wind-qin/MyPicture/master/D%3A/img20201026145854.png"></p><p><strong>4 创建自己的GitHub图床</strong></p><p><img src="https://raw.githubusercontent.com/wind-qin/MyPicture/master/D%3A%5Cimg20201026150207.png" alt="在这里插入图片描述"></p>]]></content>
      
      
      <categories>
          
          <category> github图床搭建 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 博客 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Typora写法</title>
      <link href="2020/10/15/Typora%E7%9A%84%E5%86%99%E6%B3%95/"/>
      <url>2020/10/15/Typora%E7%9A%84%E5%86%99%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<h1 id="Typora的下载"><a href="#Typora的下载" class="headerlink" title="Typora的下载"></a>Typora的下载</h1><p><a href="https://share.weiyun.com/QOIBRwsr">下载</a></p><h1 id="Typora的写法"><a href="#Typora的写法" class="headerlink" title="Typora的写法"></a>Typora的写法</h1><h3 id="标题的使用"><a href="#标题的使用" class="headerlink" title="标题的使用"></a>标题的使用</h3><h4 id="标题的使用格式"><a href="#标题的使用格式" class="headerlink" title="标题的使用格式"></a>标题的使用格式</h4><p># 一阶标题 或者快捷键Ctrl+1</p><p>##二阶标题 或者快捷键Ctrl+2</p><p>###三阶标题 或者快捷键Ctrl+3</p><p>####四阶标题 或者快捷键Ctrl+4</p><p>#####五阶标题 或者快捷键Ctrl+5</p><p>######六阶标题 或者快捷键Ctrl+6</p><h4 id="标题Typora显示形式是"><a href="#标题Typora显示形式是" class="headerlink" title="标题Typora显示形式是"></a>标题Typora显示形式是</h4><p><img src="http://qinjunxiang.gitee.io/Pictures/Typora%E7%94%A8%E6%B3%95%E5%9B%BE01.png"></p><h3 id="文本居中"><a href="#文本居中" class="headerlink" title="文本居中"></a>文本居中</h3><h4 id="文本居中使用格式"><a href="#文本居中使用格式" class="headerlink" title="文本居中使用格式"></a>文本居中使用格式</h4><pre><code>&lt;center&gt;这是要居中的文本内容&lt;/center&gt;</code></pre><h4 id="文本居中显示形式是"><a href="#文本居中显示形式是" class="headerlink" title="文本居中显示形式是"></a>文本居中显示形式是</h4><center>这是要居中的文本内容</center>注：Typora目前并不会直接预览居中效果——相应的效果只有输出文本的时候才会显现。 <h3 id="下划线"><a href="#下划线" class="headerlink" title="下划线"></a>下划线</h3><h4 id="下划线使用格式"><a href="#下划线使用格式" class="headerlink" title="下划线使用格式"></a>下划线使用格式</h4><pre><code> &lt;u&gt;下划线的内容&lt;u&gt; </code></pre><p>或者快捷键Ctrl+U</p><h4 id="下划线在Typora显示形式是"><a href="#下划线在Typora显示形式是" class="headerlink" title="下划线在Typora显示形式是"></a>下划线在Typora显示形式是</h4><p> <u>这就是我亲测的下划线</u></p><h3 id="删除线"><a href="#删除线" class="headerlink" title="删除线"></a>删除线</h3><p>删除线使用格式</p><pre><code>~~删除线的内容~~</code></pre><h4 id="删除线在Typora显示形式是"><a href="#删除线在Typora显示形式是" class="headerlink" title="删除线在Typora显示形式是"></a>删除线在Typora显示形式是</h4><p><del>这是删除线的内容</del></p><h3 id="字体加粗"><a href="#字体加粗" class="headerlink" title="字体加粗"></a>字体加粗</h3><h4 id="字体加粗使用格式"><a href="#字体加粗使用格式" class="headerlink" title="字体加粗使用格式"></a>字体加粗使用格式</h4><pre><code> **加粗字体** </code></pre><p> 或者快捷键Ctrl+B </p><h4 id="字体加粗在Typora显示形式是"><a href="#字体加粗在Typora显示形式是" class="headerlink" title="字体加粗在Typora显示形式是"></a>字体加粗在Typora显示形式是</h4><p><strong>加粗字体 This is a bold font</strong></p><h3 id="字体倾斜"><a href="#字体倾斜" class="headerlink" title="字体倾斜"></a>字体倾斜</h3><h4 id="字体倾斜使用格式"><a href="#字体倾斜使用格式" class="headerlink" title="字体倾斜使用格式"></a>字体倾斜使用格式</h4><pre><code>*字体倾斜了*</code></pre><p> 或者快捷键Ctrl+I </p><h4 id="字体倾斜在Typora的显示形式"><a href="#字体倾斜在Typora的显示形式" class="headerlink" title="字体倾斜在Typora的显示形式"></a>字体倾斜在Typora的显示形式</h4><p> <em>字体倾斜了 This is a alanted font</em> </p><h3 id="图片的插入"><a href="#图片的插入" class="headerlink" title="图片的插入"></a>图片的插入</h3><p> 最简单粗暴的图片插入方式如图 :</p><p><img src="http://qinjunxiang.gitee.io/Pictures/Typora%E7%94%A8%E6%B3%95%E5%9B%BE05.gif"></p><h3 id="视频的插入"><a href="#视频的插入" class="headerlink" title="视频的插入"></a>视频的插入</h3><p>方法一：</p><pre><code>&lt;video src=&quot;地址&quot;&gt;&lt;/video&gt;</code></pre><p>方法二：</p><pre><code>&lt;/iframe height=498 width=510 src=&quot;http://player.youku.com/embed/XNjcyMDU4Njg0&quot;&gt;</code></pre><p>注意：方法一可如插入图片般直接拉入，方法二由于插入视频后在博客中会将视频以下内容顶掉，在此将不再添加，如有兴趣可在Typora中添加尝试</p><h3 id="超链接"><a href="#超链接" class="headerlink" title="超链接"></a>超链接</h3><h4 id="超链接使用格式"><a href="#超链接使用格式" class="headerlink" title="超链接使用格式"></a>超链接使用格式</h4><p>第一种：<a href="http://www.simba.com/">http://www.simba.com</a></p><p>第二种：快捷键Ctrl+K</p><pre><code> [自定义内容](超链接地址) 例如：[百度一下](www.baidu.com) </code></pre><h4 id="超链接在Typora显示形式是：（必须以http开头）"><a href="#超链接在Typora显示形式是：（必须以http开头）" class="headerlink" title="超链接在Typora显示形式是：（必须以http开头）"></a>超链接在Typora显示形式是：（必须以http开头）</h4><p>第一种：<a href="http://www.simba.com/">http://www.simba.com</a></p><p>第二种：<a href="https://blog.csdn.net/SIMBA1949/article/details/www.baidu.com">百度一下</a></p><p>按住Ctrl键+点击上面链接就可以直接访问该链接</p><h3 id="代码区域"><a href="#代码区域" class="headerlink" title="代码区域"></a>代码区域</h3><p> Typora支持对多种语言的代码区域进行<strong>语法高亮</strong>。这些语言可以说是<strong>涵盖了绝大部分经常使用的编程语言</strong>，包括C++，Python，MATLAB，甚至包含spreadsheet（也就是Excel电子表格）。用Typora记编程笔记，看起来一清二楚。如果设置代码语言为flow，那么可以直接画出一个流程图；还可以使用相应的方法画出时序图等图表。 </p><h4 id="代码区域的使用格式"><a href="#代码区域的使用格式" class="headerlink" title="代码区域的使用格式"></a>代码区域的使用格式</h4><pre><code>` ` `+编程语言：例如java代码：` ` `java</code></pre><p>在代码块的右下角写所用的编程语言</p><h4 id="代码区域在typora中显示形式"><a href="#代码区域在typora中显示形式" class="headerlink" title="代码区域在typora中显示形式"></a>代码区域在typora中显示形式</h4><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">simba</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>  <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"梦回大唐"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="表格的使用"><a href="#表格的使用" class="headerlink" title="表格的使用"></a>表格的使用</h3><h4 id="表格的二种使用格式"><a href="#表格的二种使用格式" class="headerlink" title="表格的二种使用格式"></a>表格的二种使用格式</h4><p> 第一种：快捷键<strong>Ctrl+T</strong>，会自动跳出设置行和列的设置框，如下图 </p><p><img src="http://qinjunxiang.gitee.io/Pictures/Typora%E7%94%A8%E6%B3%95%E5%9B%BE06.jpg"></p><p>第二种：</p><p>|国籍|省份|市区|</p><h3 id="表格在typora中显示形式"><a href="#表格在typora中显示形式" class="headerlink" title="表格在typora中显示形式"></a>表格在typora中显示形式</h3><p>第一种：</p><table><thead><tr><th>id</th><th>username</th><th>password</th></tr></thead><tbody><tr><td>1</td><td>李太白</td><td>123456</td></tr></tbody></table><p>第二种：</p><table><thead><tr><th>id</th><th>username</th><th>password</th></tr></thead><tbody><tr><td></td><td></td><td></td></tr></tbody></table><h3 id="任务列表"><a href="#任务列表" class="headerlink" title="任务列表"></a>任务列表</h3><h3 id="任务列表使用格式"><a href="#任务列表使用格式" class="headerlink" title="任务列表使用格式"></a>任务列表使用格式</h3><p>右键  如图：</p><p> <img src="http://qinjunxiang.gitee.io/Pictures/Typora%E7%94%A8%E6%B3%95%E5%9B%BE07.png"></p><h3 id="任务列表在typora中的显示形式"><a href="#任务列表在typora中的显示形式" class="headerlink" title="任务列表在typora中的显示形式"></a>任务列表在typora中的显示形式</h3><ul><li><p><input checked="" disabled="" type="checkbox">  JAVA</p></li><li><p><input checked="" disabled="" type="checkbox">  C</p></li><li><p><input disabled="" type="checkbox">  C++</p></li><li><p><input disabled="" type="checkbox">  Python</p><p>（注意：在CSDN博客上未显示，但是在Typora上显示如下图： </p><p><img src="http://qinjunxiang.gitee.io/Pictures/Typora%E7%94%A8%E6%B3%95%E5%9B%BE08.png"></p></li></ul><h3 id="列表"><a href="#列表" class="headerlink" title="列表"></a>列表</h3><h4 id="列表的使用格式"><a href="#列表的使用格式" class="headerlink" title="列表的使用格式"></a>列表的使用格式</h4><p>+ 、- 、* 创建无序列，任意数字开始+空格创建有序列表</p><h4 id="列表在typora中的显示形式"><a href="#列表在typora中的显示形式" class="headerlink" title="列表在typora中的显示形式"></a>列表在typora中的显示形式</h4><ul><li>java</li><li>C</li><li>C++</li><li>Python</li></ul><h3 id="水平分割线"><a href="#水平分割线" class="headerlink" title="水平分割线"></a>水平分割线</h3><h4 id="水平分割线的使用格式"><a href="#水平分割线的使用格式" class="headerlink" title="水平分割线的使用格式"></a>水平分割线的使用格式</h4><p>***或者- - -</p><h4 id="水平分割线在typora中显示形式"><a href="#水平分割线在typora中显示形式" class="headerlink" title="水平分割线在typora中显示形式"></a>水平分割线在typora中显示形式</h4><hr><hr><p> 注意：在CSDN博客上未显示，但是在Typora上显示如下图： </p><p><img src="http://qinjunxiang.gitee.io/Pictures/Typora%E7%94%A8%E6%B3%95%E5%9B%BE03.png"></p><h3 id="改变字体的颜色"><a href="#改变字体的颜色" class="headerlink" title="改变字体的颜色"></a>改变字体的颜色</h3><h4 id="改变颜色的格式"><a href="#改变颜色的格式" class="headerlink" title="改变颜色的格式"></a>改变颜色的格式</h4><pre><code>&lt;font color=&#39;red&#39;&gt;改变字体的颜色&lt;/font&gt;</code></pre><h4 id="字体在typora中显示形式"><a href="#字体在typora中显示形式" class="headerlink" title="字体在typora中显示形式"></a>字体在typora中显示形式</h4><p><font color='red'>改变字体的颜色</font></p><h3 id="注释"><a href="#注释" class="headerlink" title="注释"></a>注释</h3><h4 id="注释的格式"><a href="#注释的格式" class="headerlink" title="注释的格式"></a>注释的格式</h4><pre><code>&lt;!--才能够显示--&gt;</code></pre><p>注意：注释后Typora中显示注释的内容，但展示页面中不显示</p><h3 id="Typora快捷键"><a href="#Typora快捷键" class="headerlink" title="Typora快捷键"></a>Typora快捷键</h3><table><thead><tr><th>快捷键</th><th>作用</th><th>快捷键</th><th>作用</th></tr></thead><tbody><tr><td>Ctrl+1</td><td>一阶标题</td><td>Ctrl+B</td><td>字体加粗</td></tr><tr><td>Ctrl+2</td><td>二阶标题</td><td>Ctrl+I</td><td>字体倾斜</td></tr><tr><td>Ctrl+3</td><td>三阶标题</td><td>Ctrl+U</td><td>下划线</td></tr><tr><td>Ctrl+4</td><td>四阶标题</td><td>Ctrl+Home</td><td>返回Typora顶部</td></tr><tr><td>Ctrl+5</td><td>五阶标题</td><td>Ctrl+End</td><td>返回Typora底部</td></tr><tr><td>Ctrl+6</td><td>六阶标题</td><td>Ctrl+T</td><td>创建表格</td></tr><tr><td>Ctrl+L</td><td>选中某句话</td><td>Ctrl+K</td><td>创建超链接</td></tr><tr><td>Ctrl+D</td><td>选中某个单词</td><td>Ctrl+F</td><td>搜索</td></tr><tr><td>Ctrl+E</td><td>选中相同格式的文字</td><td>Ctrl+H</td><td>搜索并替换</td></tr><tr><td>Alt+Shift+5</td><td>删除线</td><td>Ctrl+Shift+I</td><td>插入图片</td></tr></tbody></table><p>注：一些实体符号需要在实体符号之前加””</p>]]></content>
      
      
      <categories>
          
          <category> Typora </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Typora </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java面向对象</title>
      <link href="2020/10/14/java%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/"/>
      <url>2020/10/14/java%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/</url>
      
        <content type="html"><![CDATA[<p>由于使用代码高高文中代码中所有 <font color='red'>大括号 {}</font>都由<font color='red'>&amp;#125</font>代替</p><h3 id="返回值"><a href="#返回值" class="headerlink" title="返回值"></a>返回值</h3><p>方法中的返回值有两种情况，即有返回值和无返回值，如果定义方法时有返回值类型，就需要返回相对应的数据类型</p><pre class="line-numbers language-java"><code class="language-java">基本数据类型    值传递，不改变自身引用数据类型    引用传递，改变自身<span class="token keyword">void</span>    无返回值<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-shell"><code class="language-shell">1、一个方法只能有一个返回值2、分支结构的每一个分支都需要正确的返回值3、返回值可以接收也可以不接收<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h4 id="return-关键字"><a href="#return-关键字" class="headerlink" title="return 关键字"></a>return 关键字</h4><h4 id="作用"><a href="#作用" class="headerlink" title="作用"></a>作用</h4><p>结束当前方法，返回至调用方法处，如果定义了返回值类型就返回对应类型的数据</p><p>【注意】<a href="">数据类型一致化</a></p><h4 id="格式"><a href="#格式" class="headerlink" title="格式"></a>格式</h4><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">return</span> 需要返回的数据<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h4><pre class="line-numbers language-shell"><code class="language-shell">1、单一职能原则，一个方法只做一件事2、注意形参和实参数据类型一致化3、返回值类型和参数没有关系4、方法名要符合小驼峰命名规则5、return的下一行代码不会执行<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="有返回值方法调用"><a href="#有返回值方法调用" class="headerlink" title="有返回值方法调用"></a>有返回值方法调用</h3><h4 id="无参有返回值的方法：give-me-five"><a href="#无参有返回值的方法：give-me-five" class="headerlink" title="无参有返回值的方法：give me five"></a>无参有返回值的方法：give me five</h4><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">TestMethod1</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token function">giveMeFive</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**    * 返回一个整数 5    *    * @return 5 int类型    */</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">giveMeFive</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token number">5</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="有参有返回值的方法：两个数求和"><a href="#有参有返回值的方法：两个数求和" class="headerlink" title="有参有返回值的方法：两个数求和"></a>有参有返回值的方法：两个数求和</h4><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MethodDemo6</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">/*         * 调用自定义getSumOfTwoNumber方法，需要两个int类型的参数，并得到一个int类型的返回值         *          * 参数列表一定要和方法声明上的参数类型完全一致         */</span>         <span class="token keyword">int</span> total <span class="token operator">=</span> <span class="token function">getSumOfTwoNumber</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>total<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * 两个整数进行求和     *      * @param num1 求和的第一个数     * @param num2 求和的第二个数     * @return 返回两个参数的和，int类型     */</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">getSumOfTwoNumber</span><span class="token punctuation">(</span><span class="token keyword">int</span> num1<span class="token punctuation">,</span> <span class="token keyword">int</span> num2<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> num1 <span class="token operator">+</span> num2<span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>【注意】调用带有多参数的方法，要求传入的参数数据类型，个数和顺序还有数据类型必须和方法声明一致</p><h4 id="规范化return"><a href="#规范化return" class="headerlink" title="规范化return"></a>规范化return</h4><p>在一个方法中，return出现的次数要尽可能得少，为了提高阅读性和逻辑性</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">TestMethod4</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token function">getCompare</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**    * 比较大小，返回较大的那个数    *    * @param num1 int类型    * @param num2 int类型    * @return int类型的结果    */</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">getCompare</span><span class="token punctuation">(</span><span class="token keyword">int</span> num1<span class="token punctuation">,</span> <span class="token keyword">int</span> num2<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> num1 <span class="token operator">></span> num2 <span class="token operator">?</span> num1 <span class="token operator">:</span> num2<span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h4><pre class="line-numbers language-shell"><code class="language-shell">1、break 是退出当前循环结构，return 是退出当前方法2、如果返回值类型是 void ，可以返回 null 或者不返回或者 return;3、一个方法可以有多个 return，但只能有一个返回值4、返回值可以接收也可以不接收，由调用者决定如何调用5、分支结构里的每一个分支都需要有正确的返回值6、对返回值的处理方式因情况而定，可以打印、参与运算或者当做其他方法的实参7、调用带有多参数的方法，要求传入的参数数据类型，个数和顺序和类型必须和方法声明一致<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>【注意】方法具有单一职能原则，一个函数只做一件事</p><h3 id="方法重载【Overload】"><a href="#方法重载【Overload】" class="headerlink" title="方法重载【Overload】"></a>方法重载【Overload】</h3><h4 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h4><p>一个类或者接口中定义多个相同名称的方法</p><h4 id="要求"><a href="#要求" class="headerlink" title="要求"></a>要求</h4><pre class="line-numbers language-shell"><code class="language-shell">1、必须在同一个类中2、方法名必须一致3、参数必须不一致(个数，顺序，类型)    4、与访问修饰符、返回值类型无关<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MethodDemo9</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 调用同名方法，传入不同的参数列表，即可实现方法的重载</span>        <span class="token function">play</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">play</span><span class="token punctuation">(</span><span class="token string">"英雄联盟"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">play</span><span class="token punctuation">(</span><span class="token string">"红色警戒"</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">play</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">"DNF"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">play</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"玩王者荣耀"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">play</span><span class="token punctuation">(</span>String gameName<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"玩"</span> <span class="token operator">+</span> gameName<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">play</span><span class="token punctuation">(</span>String gameName<span class="token punctuation">,</span> <span class="token keyword">int</span> time<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"玩"</span> <span class="token operator">+</span> gameName <span class="token operator">+</span> time <span class="token operator">+</span> <span class="token string">"小时"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">play</span><span class="token punctuation">(</span><span class="token keyword">int</span> time<span class="token punctuation">,</span> String gameName<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"玩"</span> <span class="token operator">+</span> gameName <span class="token operator">+</span> time <span class="token operator">+</span> <span class="token string">"小时"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/*      * Duplicate method play(String, int) in type MethodDemo9     *      * 跟返回值类型无关，只关注方法名和参数类型     */</span><span class="token comment" spellcheck="true">//    public static String play(String gameName, int time) &amp;#123;</span><span class="token comment" spellcheck="true">//        return "玩" + gameName + time + "小时";</span><span class="token comment" spellcheck="true">//    &amp;#125;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="优点"><a href="#优点" class="headerlink" title="优点"></a>优点</h4><p>满足需求多样化，屏蔽使用差异，灵活、方便</p><h4 id="总结-1"><a href="#总结-1" class="headerlink" title="总结"></a>总结</h4><blockquote><p>方法的重载我们只关注方法名和参数类型，要求方法名必须一致，参数列表必须不一致（个数，顺序，类型）</p></blockquote><h3 id="局部变量"><a href="#局部变量" class="headerlink" title="局部变量"></a>局部变量</h3><h4 id="概念-1"><a href="#概念-1" class="headerlink" title="概念"></a>概念</h4><p>在方法内部或者形参列表上定义的变量（包括mian方法）</p><h4 id="作用域"><a href="#作用域" class="headerlink" title="作用域"></a>作用域</h4><p>从定义局部变量的那一行到所在的代码块结束</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> <span class="token number">10</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> <span class="token number">10</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>【注意】两个for循环中，i 循环变量分别属于不同的大括号以内，不同的作用域空间，并不冲突</p><h4 id="生存期"><a href="#生存期" class="headerlink" title="生存期"></a>生存期</h4><p>从方法被调用的时刻算起到函数返回调用处的时刻结束</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> <span class="token number">10</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 报错，找不到符号</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>【注意】for 循环结束时局部变量 i 的生存期结束，在 for 循环外无法使用 i</p><h4 id="单一性，不能重名"><a href="#单一性，不能重名" class="headerlink" title="单一性，不能重名"></a>单一性，不能重名</h4><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">// 报错！</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> <span class="token number">10</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> <span class="token number">10</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>【注意】在一个方法内局部变量不能多次定义</p><h4 id="值传递"><a href="#值传递" class="headerlink" title="值传递"></a>值传递</h4><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Test</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> num <span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">;</span>        <span class="token function">test</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 5</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token keyword">int</span> num<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        num <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>【注意】基本数据类型作为参数传递给局部变量时，传递的是值，局部变量的更改不影响实参本身</p><table><thead><tr><th align="center">值传递分析图</th></tr></thead><tbody><tr><td align="center"><img src="http://qinjunxiang.gitee.io/Pictures/%E5%80%BC%E4%BC%A0%E9%80%92.jpg" alt="值传递"></td></tr></tbody></table><h4 id="引用传递"><a href="#引用传递" class="headerlink" title="引用传递"></a>引用传递</h4><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MethodDemoC</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">int</span><span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"调用方法前："</span> <span class="token operator">+</span> arr<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">test</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"调用方法后："</span> <span class="token operator">+</span> arr<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        arr<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>【注意】引用数据类型传递时传递的是地址，局部变量直接作用于实参本身</p><table><thead><tr><th align="center">引用传递分析图</th></tr></thead><tbody><tr><td align="center"><img src="http://qinjunxiang.gitee.io/Pictures/%E5%BC%95%E7%94%A8%E4%BC%A0%E9%80%92.jpg" alt="引用传递"></td></tr></tbody></table><h4 id="总结-2"><a href="#总结-2" class="headerlink" title="总结"></a>总结</h4><pre class="line-numbers language-shell"><code class="language-shell">局部变量声明在函数中，从定义的那一行开始到函数结束时被销毁局部变量必须先赋值再使用局部变量不能重复定义值传递：基本数据类型的传递不改变实参引用传递：引用数据类型的传递会改变实参Java中只有值传递，引用传递传递的是地址值<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="面向对象"><a href="#面向对象" class="headerlink" title="面向对象"></a>面向对象</h3><h4 id="学习要求"><a href="#学习要求" class="headerlink" title="学习要求"></a>学习要求</h4><blockquote><p>1、听不懂没关系，不影响写代码，读着代码就会写了。</p><p>2、先会用，在用的过程中逐渐加深对面向对象的理解。</p><p>3、利用不断地练习，形成<code>肌肉记忆</code>(代码格式)和<code>意识记忆</code>(要啥给啥)。（<font color='red'>开发中重要的思想而不是语法</font>）</p></blockquote><h4 id="引言"><a href="#引言" class="headerlink" title="引言"></a>引言</h4><blockquote><p>面向过程编程（POP –&gt; <strong>Process-Oriented Programming</strong>）代表：C语言</p><p>面向对象编程（OOP –&gt; <strong>Object-Oriented Programming</strong>）代表：C++、Java</p><p>面向切面编程（AOP –&gt; <strong>Aspect-Oriented Programming</strong>）代表：Java</p></blockquote><h4 id="面向对象的定义"><a href="#面向对象的定义" class="headerlink" title="面向对象的定义"></a>面向对象的定义</h4><p>面向对象的思想是把一个项目、一件事情分成更小的项目，或者说分成一个个更小的部分，每一部分负责什么方面的功能，最后再由这些部分组合而成为一个整体。</p><p><a href="">找合适的人做合适的事</a></p><h4 id="生活中的面向对象和面向过程"><a href="#生活中的面向对象和面向过程" class="headerlink" title="生活中的面向对象和面向过程"></a>生活中的面向对象和面向过程</h4><p>举例：<strong>想吃烤羊排</strong></p><blockquote><p>面向对象：找个店铺吃</p><p>​    1、去羊排店</p><p>​    2、点一斤羊排</p><p>​    3、等25分钟</p><p>​    4、吃</p><p>​    5、付款走人</p><p>面向过程：自己做着吃</p><p>​    1、自己做羊排</p><p>​        1.准备材料（羊、辅料、调料）</p><p>​        2.备料</p><p>​        3.烤箱预热，开烤</p><p>​        4.15分钟翻面一次</p><p>​        5.取出</p><p>​    2、吃</p><p>​    3、洗锅刷碗，打扫卫生</p></blockquote><h4 id="面向对象思想"><a href="#面向对象思想" class="headerlink" title="面向对象思想"></a>面向对象思想</h4><pre class="line-numbers language-shell"><code class="language-shell">1、面向对象是基于面向过程的编程思想2、万物皆对象3、对象具有唯一性4、任何对象都具有一定的特征和行为；特征是事物的基本描述，行为是事物的功能5、类是一组相关的属性和方法的集合，是一个抽象的概念6、对象是类的具体存在7、在一组相同或相似的对象中，抽取出共性的特征和行为，保留所关注的部分就是类的抽取8、类是模板、图纸，通过类创造的对象就是实体<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="面向对象的优点"><a href="#面向对象的优点" class="headerlink" title="面向对象的优点"></a>面向对象的优点</h4><ul><li>直观，高效，与人类的思维习惯一致</li><li>信息隐藏，提高了程序的可维护性和安全性</li><li>提高了程序的可重用性</li></ul><h4 id="总结-3"><a href="#总结-3" class="headerlink" title="总结"></a>总结</h4><blockquote><p>面向过程：亲力亲为，自力更生，所有过程都要经历（诸葛亮是怎么死的，累死的）</p><p>面向对象：找合适的人做合适的事，直观高效（烤羊排）</p></blockquote><h3 id="类和对象"><a href="#类和对象" class="headerlink" title="类和对象"></a>类和对象</h3><h4 id="生活中的类和对象"><a href="#生活中的类和对象" class="headerlink" title="生活中的类和对象"></a>生活中的类和对象</h4><table><thead><tr><th align="center">类</th><th align="center">对象</th></tr></thead><tbody><tr><td align="center">人类</td><td align="center">马云爸爸，麻花藤（<font color='red'>隔壁老王、女朋友</font>）</td></tr><tr><td align="center">狗类</td><td align="center">史努比，忠犬八公，高飞，斯派克，小白，王可可（<font color='red'>单身狗、旺财、金毛、哈士奇</font>）</td></tr><tr><td align="center">英雄类</td><td align="center">Faker的劫，The Shy的卢锡安，霸哥的石头人，马老师的螳螂（<font color='red'>盖伦、锤石、EZ</font>）</td></tr><tr><td align="center">化妆品类</td><td align="center">我的洗面奶（<font color='red'>阿玛尼405唇釉，chill小辣椒口红，黛珂水乳，雅诗兰黛粉底液，nars腮红</font>）</td></tr></tbody></table><p>这些对象有什么特点？</p><blockquote><p>人类：</p><ul><li>马云爸爸，麻花藤</li></ul><p>​    都是特立独行的个体，我们一提起这个个体脑海中就能浮现出他的形象，</p><ul><li>隔壁老王、女朋友</li></ul><p>​    这些都不是对象，因为每个人都会有自己的隔壁老王，都有自己的女朋友，你脑海中的隔壁老王和你同桌脑海中的隔壁老王是同一个人吗？除非你们是同一个邻居还姓王那就不说了。但你们的女朋友总不会也是同一个吧？所以说，女朋友，隔壁老王都不是对象，你的隔壁老王，你的女朋友才是个对象！！！</p><p>狗类：</p><ul><li>史努比，忠犬八公，高飞，斯派克，小白，王可可</li></ul><p>​    这些都是独一无二的</p><ul><li>单身狗、旺财、金毛、哈士奇</li></ul><p>​    这些全都是类</p></blockquote><h4 id="Java中的类和对象"><a href="#Java中的类和对象" class="headerlink" title="Java中的类和对象"></a><font color='red'>Java中的类和对象</font></h4><h4 id="类"><a href="#类" class="headerlink" title="类"></a>类</h4><p>类是对某一类事物的描述，是抽象的、概念上的定义。<strong>类是模板，包含了一类事物所共有的特征(属性)和行为(方法)</strong></p><p>以人类为例：</p><blockquote><p>属性描述：学号、姓名、性别、年龄、身高、体重、地址、电话、微信、QQ…</p><p>行为描述：吃饭、睡觉、上班、学习、娱乐…</p></blockquote><h4 id="对象"><a href="#对象" class="headerlink" title="对象"></a>对象</h4><p><strong>对象是类的具体体现（<a href="">属性和方法</a>），是具体的、独一无二的个体。</strong></p><p>以班长为例：</p><blockquote><p>属性描述：班长的学号、班长的姓名、班长的身高…</p><p>行为描述：班长吃饭、班长睡觉、班长学习…</p></blockquote><h4 id="类和对象的关系"><a href="#类和对象的关系" class="headerlink" title="类和对象的关系"></a>类和对象的关系</h4><p>类是对象的抽象，对象是类的具体实现</p><h4 id="类的定义"><a href="#类的定义" class="headerlink" title="类的定义"></a><font color='red'>类的定义</font></h4><p>类是一种自定义的数据类型</p><pre class="line-numbers language-shell"><code class="language-shell">格式：    class 类名 &#123;        成员变量;// Field        成员方法;// Method    &#125;class：    定义类的关键字类名：    大驼峰命名，首字母大写，见名知意    类名就是一种数据类型（自定义引用的数据类型），就是模板的名字成员变量（属性/特征描述）：    定义在类中，方法外的变量，用来描述类的特征成员方法（行为描述）：    定义在类中，用来描述类的功能<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Student</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 成员变量【Field】</span>    String name<span class="token punctuation">;</span>    <span class="token keyword">int</span> age<span class="token punctuation">;</span>    <span class="token keyword">char</span> sex<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 成员方法【Method】</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">eat</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"吃"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">sleep</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"睡"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">play</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"玩"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="类和对象-1"><a href="#类和对象-1" class="headerlink" title="类和对象"></a>类和对象</h3><h4 id="对象的创建"><a href="#对象的创建" class="headerlink" title="对象的创建"></a><font color='red'>对象的创建</font></h4><p>参考Scanner的创建，依葫芦画瓢</p><pre class="line-numbers language-java"><code class="language-java">Scanner sc <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Scanner</span><span class="token punctuation">(</span>System<span class="token punctuation">.</span>in<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">// 格式：</span>    类名 对象名 <span class="token operator">=</span> <span class="token keyword">new</span> 类名<span class="token punctuation">(</span><span class="token punctuation">[</span>参数<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><pre class="line-numbers language-java"><code class="language-java">Person person <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="对象的使用"><a href="#对象的使用" class="headerlink" title="对象的使用"></a><font color='red'>对象的使用</font></h4><p>参考数组和 Scanner 的使用，依葫芦画瓢</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> array <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">int</span><span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">]</span><span class="token punctuation">;</span>array<span class="token punctuation">.</span>length    <span class="token comment" spellcheck="true">// 注意：这里没有 ()，说明这不是方法，那它是什么？我们用它来表示数组的长度，数组的长度是数组的一个属性</span>Scanner sc <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Scanner</span><span class="token punctuation">(</span>System<span class="token punctuation">.</span>in<span class="token punctuation">)</span><span class="token punctuation">;</span>sc<span class="token punctuation">.</span><span class="token function">nextInt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java"><code class="language-java">格式：    使用成员变量：        对象名<span class="token punctuation">.</span>成员变量    使用成员方法：        对象名<span class="token punctuation">.</span>成员方法<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">// 通过Person类对象person操作name、sex、age属性</span><span class="token comment" spellcheck="true">// 进行赋值操作</span>person<span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">"张三"</span><span class="token punctuation">;</span>person<span class="token punctuation">.</span>age <span class="token operator">=</span> <span class="token number">25</span><span class="token punctuation">;</span>person<span class="token punctuation">.</span>sex <span class="token operator">=</span> <span class="token string">'男'</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 通过person进行取值操作</span>System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>person<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>person<span class="token punctuation">.</span>age<span class="token punctuation">)</span><span class="token punctuation">;</span>System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>person<span class="token punctuation">.</span>sex<span class="token punctuation">)</span><span class="token punctuation">;</span>person<span class="token punctuation">.</span><span class="token function">eat</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>person<span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>person<span class="token punctuation">.</span><span class="token function">play</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>. 的含义是 “的”</p><p>person.name：person的name</p><p>person.age：person的年龄</p><p>person.sex：person的性别</p></blockquote><blockquote><p>扩展：</p><p>如果直接打印对象名，会得到一个对象的【地址】，这个地址包含两部分：1、完整的包名；2、当前对象存储在堆区内存中的空间首地址</p></blockquote><h4 id="对象内存分析图"><a href="#对象内存分析图" class="headerlink" title="对象内存分析图"></a>对象内存分析图</h4><table><thead><tr><th align="center">对象内存分析图</th></tr></thead><tbody><tr><td align="center"><img src="http://qinjunxiang.gitee.io/Pictures/java%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A101.png"></td></tr></tbody></table><h4 id="总结-4"><a href="#总结-4" class="headerlink" title="总结"></a>总结</h4><blockquote><p>没听懂没关系，多敲代码，读着代码就懂了</p><p>生活中的类和对象</p><ul><li>类是事物的统称，是一个抽象的概念</li><li>对象是事物的表现，是具体的，独一无二的</li></ul><p>Java中的类和对象</p><ul><li>类是对象的抽象，具有公共的特征和行为，对象是类的具体实现，具有唯一的特征和行为</li></ul><p>基础数据类型与类和对象</p><ul><li>类就是一种自定义的数据类型，由类名，属性和方法构成</li><li>对象就是一种数据类型的数据，由对象名，属性和方法构成</li></ul><p>类和对象的定义和使用</p><ul><li>格式和规范，一定要按照标准</li></ul><p><strong>注意</strong></p><pre class="line-numbers language-shell"><code class="language-shell">大写开头的都是类小写开头的都是变量带()的都是方法<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></blockquote><h3 id="构造方法"><a href="#构造方法" class="headerlink" title="构造方法"></a>构造方法</h3><h4 id="引言-1"><a href="#引言-1" class="headerlink" title="引言"></a>引言</h4><blockquote><p>构造方法很重要，但是比较鸡肋</p></blockquote><h4 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h4><p>构造方法（<code>Constructor</code>）的名称和类名相同，没有返回值类型。</p><h4 id="作用-1"><a href="#作用-1" class="headerlink" title="作用"></a>作用</h4><p>类中的特殊方法，用于<font color='red'>创建对象</font>，在创建对象的时候会执行一些初始化操作，如给成员属性赋初值</p><h4 id="格式-1"><a href="#格式-1" class="headerlink" title="格式"></a>格式</h4><pre class="line-numbers language-java"><code class="language-java">格式：    类名<span class="token punctuation">(</span><span class="token punctuation">[</span>参数<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token function">Student</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><font color='red'>注意</font>：格式问题</p><blockquote><p>1、构造方法的方法名与类名完全相同</p><p>2、构造方法没有返回值类型</p><p>3、创建对象时，触发构造方法的调用，不可手动调用</p><p>4、如果没有声明构造方法，编译器默认生成无参构造方法</p><p>5、如果定义了有参构造方法，编译器就不会创建无参构造方法</p><p>【<font color='red'>强制要求</font>】</p><pre class="line-numbers language-shell"><code class="language-shell">无论什么时候，都要加上一个无参构造方法！！！<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></blockquote><h4 id="构造方法的使用"><a href="#构造方法的使用" class="headerlink" title="构造方法的使用"></a>构造方法的使用</h4><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">// 自定义有参构造方法，并给name属性赋值</span><span class="token function">Dog</span><span class="token punctuation">(</span>String n<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    name <span class="token operator">=</span> n<span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 自定义无参构造方法</span><span class="token function">Dog</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="构造方法的重载"><a href="#构造方法的重载" class="headerlink" title="构造方法的重载"></a>构造方法的重载</h3><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token function">Dog</span><span class="token punctuation">(</span>String n<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    name <span class="token operator">=</span> n<span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token function">Dog</span><span class="token punctuation">(</span>String n<span class="token punctuation">,</span> <span class="token keyword">int</span> i<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    name <span class="token operator">=</span> n<span class="token punctuation">;</span>    age <span class="token operator">=</span> i<span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="总结-5"><a href="#总结-5" class="headerlink" title="总结"></a>总结</h4><blockquote><ol><li><p>构造方法是用来创建对象，在创建对象的过程中会进行初始化操作（为对象赋值）</p></li><li><p>构造方法也是方法，除了没有返回值，其他的都跟方法一样</p></li></ol><p>按照方法参数列表的类型、个数、顺序去匹配，如果没有找到对应的就会报错</p><ol start="3"><li>无论什么时候，都一定要给一个无参构造方法</li></ol></blockquote><h4 id="扩展：反编译"><a href="#扩展：反编译" class="headerlink" title="扩展：反编译"></a>扩展：反编译</h4><pre class="line-numbers language-shell"><code class="language-shell">javap -c -l -private 类名.class<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="扩展：对象的创建过程"><a href="#扩展：对象的创建过程" class="headerlink" title="扩展：对象的创建过程"></a>扩展：对象的创建过程</h4><pre class="line-numbers language-shell"><code class="language-shell">1、类加载2、内存中开辟对象空间3、为各个属性赋予初始值4、执行构造方法中的代码5、将对象的地址赋值给变量<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="this关键字"><a href="#this关键字" class="headerlink" title="this关键字"></a>this关键字</h3><h4 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h4><p>this代表所在类的对象引用，即当前对象</p><blockquote><p>new 创建出来的对象</p><p>调用方法的对象</p></blockquote><h4 id="作用-2"><a href="#作用-2" class="headerlink" title="作用"></a>作用</h4><p>1、<font color='red'>调用本类中的属性和方法（区别成员变量和局部变量）</font></p><p>2、调用本类中的其他构造方法：this()</p><pre class="line-numbers language-shell"><code class="language-shell">格式：    this([参数...]);会根据参数列表调用对应的构造方法<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token function">Rabbit</span><span class="token punctuation">(</span>String color<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 调用本来中的属性</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>color <span class="token operator">=</span> color<span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token function">Rabbit</span><span class="token punctuation">(</span>String color<span class="token punctuation">,</span> <span class="token keyword">int</span> age<span class="token punctuation">,</span> <span class="token keyword">double</span> weight<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 调用本类中的其他构造方法</span>    <span class="token keyword">this</span><span class="token punctuation">(</span>color<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">=</span> age<span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>weight <span class="token operator">=</span> weight<span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>【注意】</p><pre class="line-numbers language-shell"><code class="language-shell">1、this()只能在构造方法中使用2、this()只能在第一行3、构造方法中不能同时出现两个this()，因为24、不能自己调用自己，不能相互调用<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h4 id="规范化this"><a href="#规范化this" class="headerlink" title="规范化this()"></a>规范化this()</h4><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Son</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    String name<span class="token punctuation">;</span>    <span class="token keyword">int</span> age<span class="token punctuation">;</span>    <span class="token keyword">float</span> salary<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token function">Son</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token function">Son</span><span class="token punctuation">(</span>String name<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 调用Son(String name, int age, float salary)</span>        <span class="token keyword">this</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0.0F</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token function">Son</span><span class="token punctuation">(</span>String name<span class="token punctuation">,</span> <span class="token keyword">int</span> age<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 调用Son(String name, int age, float salary)</span>        <span class="token keyword">this</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> age<span class="token punctuation">,</span> <span class="token number">0.0F</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token function">Son</span><span class="token punctuation">(</span>String name<span class="token punctuation">,</span> <span class="token keyword">int</span> age<span class="token punctuation">,</span> <span class="token keyword">float</span> salary<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">=</span> age<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>salary <span class="token operator">=</span> salary<span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="总结-6"><a href="#总结-6" class="headerlink" title="总结"></a>总结</h4><blockquote><ul><li>this表示的是当前对象</li><li>this可以调用本类中的属性和方法，最常用与区分成员变量和局部变量</li><li>this还可以调用本类中的构造方法，但是要注意有坑</li></ul></blockquote><h3 id="访问-权限-修饰符"><a href="#访问-权限-修饰符" class="headerlink" title="访问(权限)修饰符"></a>访问(权限)修饰符</h3><h4 id="private-私有-关键字"><a href="#private-私有-关键字" class="headerlink" title="private(私有)关键字"></a>private(私有)关键字</h4><pre class="line-numbers language-java"><code class="language-java"><span class="token number">1</span>、可以修饰成员变量和成员方法<span class="token number">2</span>、被<span class="token keyword">private</span>修饰的变量和方法仅本类中可用<span class="token number">3</span>、被<span class="token keyword">private</span>修饰的变量需要提供get、set方法供类外调用使用    <span class="token number">4</span>、<span class="token keyword">boolean</span>类型的 get 方法比较特殊：    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">isName</span><span class="token punctuation">(</span>String name<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> name<span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Dog</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> String name<span class="token punctuation">;</span>    <span class="token keyword">int</span> age<span class="token punctuation">;</span>    <span class="token keyword">public</span> String <span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setName</span><span class="token punctuation">(</span>String name<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"method be execute!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">executeFunction</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="Java中的访问修饰符"><a href="#Java中的访问修饰符" class="headerlink" title="Java中的访问修饰符"></a>Java中的访问修饰符</h4><h3 id=""><a href="#" class="headerlink" title=""></a></h3><table><thead><tr><th align="center"></th><th align="center">类内部</th><th align="center">同包下</th><th align="center">子类中</th><th align="center">非同包</th></tr></thead><tbody><tr><td align="center">public</td><td align="center">√</td><td align="center">√</td><td align="center">√</td><td align="center">√</td></tr><tr><td align="center">protected</td><td align="center">√</td><td align="center">√</td><td align="center">√</td><td align="center">×</td></tr><tr><td align="center">默认不写</td><td align="center">√</td><td align="center">√</td><td align="center">×</td><td align="center">×</td></tr><tr><td align="center">private</td><td align="center">√</td><td align="center">×</td><td align="center">×</td><td align="center">×</td></tr></tbody></table><h4 id="总结-7"><a href="#总结-7" class="headerlink" title="总结"></a>总结</h4><blockquote><p>1、一般我们最常用的就是private和public，建议任何情况下都使用访问修饰符对变量和方法进行限制</p><p>2、public权限最高，整个项目中都可以访问（同一个项目），private权限最小，只能在本类中使用</p><p>3、被private修饰的变量和方法可以通过提供公共的方法对其进行访问</p></blockquote><h3 id="封装"><a href="#封装" class="headerlink" title="封装"></a>封装</h3><h4 id="面向对象三大特征"><a href="#面向对象三大特征" class="headerlink" title="面向对象三大特征"></a>面向对象三大特征</h4><blockquote><p>封装</p><p>继承</p><p>多态</p></blockquote><h4 id="概述-1"><a href="#概述-1" class="headerlink" title="概述"></a>概述</h4><p>是指隐藏对象的属性和实现细节，仅对外提供公共访问方式。核心是<font color='red'>归纳总结</font></p><h4 id="好处"><a href="#好处" class="headerlink" title="好处"></a>好处</h4><p>提高代码的复用度、安全性，不必关心具体细节，便于开发</p><h4 id="JavaBean-规范化封装"><a href="#JavaBean-规范化封装" class="headerlink" title="JavaBean 规范化封装"></a>JavaBean 规范化封装</h4><pre class="line-numbers language-shell"><code class="language-shell">1. 要求Java中的所有实体类成员变量全部私有化，最少提供一个无参数构造方法，对应成员变量实现setter和getter方法2. JavaBean规范，是为了后期开发汇总更好的代码适配度，提高代码运行的统一性，能够满足框架的使用3. JavaBean规范只是一个规范，而且是作为一个基础规范，操作都是可以使用快捷键来完成的！！！<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Person</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> String name<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> age<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">char</span> sex<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">boolean</span> alive<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token function">Person</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> String <span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">getAge</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>age<span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">char</span> <span class="token function">getSex</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>sex<span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">isAlive</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> alive<span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setAlive</span><span class="token punctuation">(</span><span class="token keyword">boolean</span> alive<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>alive <span class="token operator">=</span> alive<span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setName</span><span class="token punctuation">(</span>String name<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setAge</span><span class="token punctuation">(</span><span class="token keyword">int</span> age<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">=</span> age<span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setSex</span><span class="token punctuation">(</span><span class="token keyword">char</span> sex<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>sex <span class="token operator">=</span> sex<span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="匿名对象"><a href="#匿名对象" class="headerlink" title="匿名对象"></a>匿名对象</h3><h4 id="概述-2"><a href="#概述-2" class="headerlink" title="概述"></a>概述</h4><p>没有名字的对象，是对象的一种简化表示形式</p><h4 id="特性"><a href="#特性" class="headerlink" title="特性"></a>特性</h4><p>一次性，每次使用都是一个新的对象</p><h4 id="使用情景"><a href="#使用情景" class="headerlink" title="使用情景"></a>使用情景</h4><blockquote><p>1、对象调用方法仅使用一次，然后等待销毁</p><p>2、作为实际参数传递</p></blockquote><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TestDog</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 对象调用方法仅使用一次</span>        <span class="token keyword">new</span> <span class="token class-name">Dog</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 作为实际参数传递</span>        <span class="token function">useDog</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Dog</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">useDog</span><span class="token punctuation">(</span>Dog dog<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        dog<span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">Dog</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    String name<span class="token punctuation">;</span>    <span class="token keyword">int</span> age<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">sleep</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"小狗睡觉....."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="优点-1"><a href="#优点-1" class="headerlink" title="优点"></a>优点</h4><p>提高开发效率，简化代码结构</p><h3 id="继承"><a href="#继承" class="headerlink" title="继承"></a>继承</h3><h4 id="概念-2"><a href="#概念-2" class="headerlink" title="概念"></a>概念</h4><p>把多个类中相同的成员给提取出来定义到一个独立的类中。然后让这多个类和该独立的类产生一个关系，这多个类就具备了这些内容。这个关系叫继承。</p><pre class="line-numbers language-java"><code class="language-java">关键字：<span class="token keyword">extends</span>格式<span class="token operator">:</span>    <span class="token keyword">class</span> <span class="token class-name">Son</span> <span class="token keyword">extends</span> <span class="token class-name">Father</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>一个孩子只能有一个父亲一个父亲可以有多个孩子<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="特点"><a href="#特点" class="headerlink" title="特点"></a>特点</h4><pre class="line-numbers language-shell"><code class="language-shell">1、Java为单继承，一个类只能有一个直接父类，但可以多级继承，属性和方法逐级叠加2、构造方法只可服务于本类，不可继承，子类执行构造方法前会默认调用父类的无参构造方法。可以通过super()去访问父类的构造方法3、private 修饰的属性和方法不能被继承<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h4 id="extends"><a href="#extends" class="headerlink" title="extends"></a>extends</h4><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Demo</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 创建一个父类对象</span>        Father father <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Father</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 父类调用父类的属性和方法</span>        father<span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">"父"</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>father<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>        father<span class="token punctuation">.</span><span class="token function">game</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"-------------"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 创建一歌子类对象</span>        Son son <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Son</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 子类调用子类的属性和方法</span>        son<span class="token punctuation">.</span>age <span class="token operator">=</span> <span class="token number">16</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>son<span class="token punctuation">.</span>age<span class="token punctuation">)</span><span class="token punctuation">;</span>        son<span class="token punctuation">.</span><span class="token function">study</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 子类调用父类的属性和方法(public修饰)</span>        son<span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">"子"</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>son<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>        son<span class="token punctuation">.</span><span class="token function">game</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">/*         * 子类调用父类private修饰的属性和方法         *          * 报错         * The field Father.suffer is not visible         * The method cook() from the type Father is not visible         *          * 由此可知子类不能调用父类私有化的属性和方法         */</span><span class="token comment" spellcheck="true">//        son.suffer = 10;</span><span class="token comment" spellcheck="true">//        son.cook();</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Father</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> String name<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> suffer<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">game</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"下棋"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">cook</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"做饭"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Son</span> <span class="token keyword">extends</span> <span class="token class-name">Father</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> age<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">study</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"子类 -- 学习"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="子类构造方法执行前默认先执行父类的无参构造方法"><a href="#子类构造方法执行前默认先执行父类的无参构造方法" class="headerlink" title="子类构造方法执行前默认先执行父类的无参构造方法"></a>子类构造方法执行前默认先执行父类的无参构造方法</h5><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Father</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    String name<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token function">Father</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Father's Constrator be performed"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">Son</span> <span class="token keyword">extends</span> <span class="token class-name">Father</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> age<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token function">Son</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Son's Constrator be performed"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TestSon</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        Son son <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Son</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>结果</p><pre class="line-numbers language-shell"><code class="language-shell">Father's Constrator be performedSon's Constrator be performed<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>【注意】Son 的构造方法中编译器默认生成 super(); 用来调用父类的构造方法，目的是为了初始化父类字段，因为子类可能会用到</p><table><thead><tr><th align="center">继承内存分析图</th></tr></thead><tbody><tr><td align="center"><img src="http://qinjunxiang.gitee.io/Pictures/%E7%BB%A7%E6%89%BF%E5%86%85%E5%AD%98%E5%88%86%E6%9E%90%E5%9B%BE.jpg" alt="继承内存分析图"></td></tr></tbody></table><h4 id="优点-2"><a href="#优点-2" class="headerlink" title="优点"></a>优点</h4><pre class="line-numbers language-shell"><code class="language-shell">1、提高了代码的复用性2、提高了代码的维护性3、让类与类之间产生了一个关系，是多态的前提<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h4 id="缺点"><a href="#缺点" class="headerlink" title="缺点"></a>缺点</h4><pre class="line-numbers language-shell"><code class="language-shell">1、让类的耦合性增强。这样某个类的改变，就会影响到其他和该类相关的类2、打破了封装性<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h4 id="总结-8"><a href="#总结-8" class="headerlink" title="总结"></a>总结</h4><blockquote><p>Java中只有单继承</p><p>子类可以继承父类的非私有属性和方法（非private修饰的）</p><p>执行子类的构造方法前会默认执行父类的无参构造方法</p></blockquote><h3 id="方法重写【Override】"><a href="#方法重写【Override】" class="headerlink" title="方法重写【Override】"></a>方法重写【Override】</h3><h4 id="引言-2"><a href="#引言-2" class="headerlink" title="引言"></a>引言</h4><p>开发中父类的方法不一定适用于子类，因为父类方法不能更改，在子类中新增方法会造成代码的冗余，而且不符合逻辑</p><h4 id="要求-1"><a href="#要求-1" class="headerlink" title="要求"></a>要求</h4><pre class="line-numbers language-shell"><code class="language-shell">1、应用于继承和实现接口2、方法的返回值类型，方法名，形参列表与父类一致3、使用@Override注解来标识4、重写方法的访问修饰符权限不能低于父类    private < 默认(什么都不写) < protected < public<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Son</span> <span class="token keyword">extends</span> <span class="token class-name">Father</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> age<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">game</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"玩红色警戒"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">study</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"子类 -- 学习"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Father</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> String name<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> suffer<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">game</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"下棋"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">cook</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"做饭"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Demo1</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        Son son <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Son</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        son<span class="token punctuation">.</span><span class="token function">game</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="优点-3"><a href="#优点-3" class="headerlink" title="优点"></a>优点</h4><p>既沿袭了父类的方法名，又实现了子类的扩展</p><h4 id="总结-9"><a href="#总结-9" class="headerlink" title="总结"></a>总结</h4><blockquote><p>1、方法的重写能够在不新增方法的情况下实现子类的扩展</p><p>2、方法重写要求方法声明格式和父类完全一致（访问修饰符不能小于父类）</p><p>3、@Overrid关键字用来开启格式检测，如果不一致就会报错</p></blockquote><h3 id="super关键字"><a href="#super关键字" class="headerlink" title="super关键字"></a>super关键字</h3><h4 id="概述-3"><a href="#概述-3" class="headerlink" title="概述"></a>概述</h4><blockquote><p>super指父类对象，用来区分父类和子类，用于调用父类的属性和方法</p><p>用法和this非常类似：this指当前对象，super指父类对象</p></blockquote><h4 id="调用父类的属性和方法"><a href="#调用父类的属性和方法" class="headerlink" title="调用父类的属性和方法"></a>调用父类的属性和方法</h4><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Father</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> age <span class="token operator">=</span> <span class="token number">60</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">play</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"下象棋"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Son</span> <span class="token keyword">extends</span> <span class="token class-name">Father</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> age <span class="token operator">=</span> <span class="token number">16</span><span class="token punctuation">;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">play</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"玩游戏"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">showAge</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> age <span class="token operator">=</span> <span class="token number">20</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"局部变量："</span> <span class="token operator">+</span> age<span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"当前对象成员变量："</span> <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">.</span>age<span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"父类对象成员变量："</span> <span class="token operator">+</span> <span class="token keyword">super</span><span class="token punctuation">.</span>age<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">callPlay</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 调用当前对象的方法</span>        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">play</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 调用父类对象的方法</span>        <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">play</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Demo</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        Son son <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Son</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        son<span class="token punctuation">.</span><span class="token function">showAge</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        son<span class="token punctuation">.</span><span class="token function">callPlay</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="调用父类的构造方法"><a href="#调用父类的构造方法" class="headerlink" title="调用父类的构造方法"></a>调用父类的构造方法</h4><p>默认调用父类的无参构造，且必须在代码的第一行</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Father</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> String name<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token function">Father</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Father's Constrator be performed"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token function">Father</span><span class="token punctuation">(</span>String name<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Father's Constrator be performed with name"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">Son</span> <span class="token keyword">extends</span> <span class="token class-name">Father</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> age<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token function">Son</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">super</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Son's Constrator be performed"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token function">Son</span><span class="token punctuation">(</span>String name<span class="token punctuation">,</span> <span class="token keyword">int</span> age<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">super</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">=</span> age<span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Son's Constrator be performed with name and age"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TestSon</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        Son son <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Son</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>【注意】super() 和this() 代码不能共存(都必须在首行)，但是实际效果其实是可以的，如果不写 super() 也会自动调用</p><h4 id="总结-10"><a href="#总结-10" class="headerlink" title="总结"></a>总结</h4><blockquote><p>1、super指父类对象，对比this关键字，使用方法都一样</p><p>2、super() 和this() 代码不能共存(都必须在首行)，但是实际效果其实是可以的，如果不写 super() 也会自动调用</p><p>3、父类的属性要交给父类的构造方法去操作，没什么事就不要去使用 super() 来调用父类的构造方法了</p></blockquote><h3 id="final关键字"><a href="#final关键字" class="headerlink" title="final关键字"></a>final关键字</h3><h4 id="概述-4"><a href="#概述-4" class="headerlink" title="概述"></a>概述</h4><p>final表示最终的，用来修饰变量，方法和类</p><pre class="line-numbers language-shell"><code class="language-shell">1、final 修饰的局部变量只能被赋值一次2、final 修饰的成员变量只能被赋值一次，并且必须在声明时就赋值3、final 修饰的基本类型变量是一个常量(只能被赋值一次)，引用类型变量不可修改地址，如对象4、final 修饰的方法不能被重写5、final 修饰的类不能被继承<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>fc<span class="token punctuation">.</span>j<span class="token punctuation">.</span>_final<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/* * final修饰的局部变量 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">FinalDemo1</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 测试final修饰的修饰的变量</span>        <span class="token keyword">final</span> <span class="token keyword">int</span> num<span class="token punctuation">;</span>        num <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">/*         * 被final修饰的变量只能赋值一次         *          * The final local variable num may already have been assigned         *          * 被final修饰的局部变量num可能已经被赋值         */</span>        <span class="token comment" spellcheck="true">// num = 20;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// final修饰的类不能被继承，断子绝孙</span><span class="token keyword">class</span> <span class="token class-name">Father</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/*     * final 修饰的成员变量必须在声明时就赋值     *      * The blank final field age may not have been initialized     * 空白的final成员变量可能未被初始化     */</span>     <span class="token comment" spellcheck="true">// final int age;</span>    <span class="token keyword">final</span> <span class="token keyword">int</span> age <span class="token operator">=</span> <span class="token number">16</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">final</span> <span class="token keyword">void</span> <span class="token function">play</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"下棋"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">Son</span> <span class="token keyword">extends</span> <span class="token class-name">Father</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/*     *  Cannot override the final method from Father     *  无法重写被final修饰的方法     */</span><span class="token comment" spellcheck="true">//    @Override</span><span class="token comment" spellcheck="true">//    public final void play() &amp;#123;</span><span class="token comment" spellcheck="true">//        </span><span class="token comment" spellcheck="true">//    &amp;#125;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="特点-1"><a href="#特点-1" class="headerlink" title="特点"></a>特点</h4><p>final修饰可以保证安全性，比如数组的长度属性，String类，这些都是final修饰的，保证不可变</p><h4 id="总结-11"><a href="#总结-11" class="headerlink" title="总结"></a>总结</h4><blockquote><p>1、final表示最终的，可以修饰变量，属性和方法</p><p>2、final修饰的基本数据类型的成员变量只能被赋值一次</p><p>3、final修饰的引用数据类型的成员变量地址不可变，但不影响地址所指向的对象的操作</p><p>4、final修饰的方法不能被重写</p><p>5、final修饰的类不能被继承</p></blockquote><h3 id="static关键字"><a href="#static关键字" class="headerlink" title="static关键字"></a>static关键字</h3><h4 id="概述-5"><a href="#概述-5" class="headerlink" title="概述"></a>概述</h4><p>static 关键字方便在<strong>没有创建对象的情况下来进行调用方法和变量</strong>(优先级高于对象)，可以用来修饰类的成员方法、类的成员变量，另外可以编写static代码块来优化程序性能</p><h4 id="static变量"><a href="#static变量" class="headerlink" title="static变量"></a>static变量</h4><p>static变量也称作静态变量，静态变量和非静态变量的区别是：静态变量被所有的对象所共享，在内存中只有一个副本，它当且仅当在类初次加载时会被初始化。</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">PersonDemo</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        Person person1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token string">"张三"</span><span class="token punctuation">,</span> <span class="token number">16</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Person person2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token string">"李四"</span><span class="token punctuation">,</span> <span class="token number">17</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Person person3 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token string">"王五"</span><span class="token punctuation">,</span> <span class="token number">18</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Person person4 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token string">"赵六"</span><span class="token punctuation">,</span> <span class="token number">19</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">/*         * The static field Person.address should be accessed in a static way         * 静态成员变量应该通过静态的方式访问（注意这里是应该，不是必须）         *          * Change access to static using 'Person' (declaring type)         * 使用Person声明类型来更改对静态的访问         * 通过类名来操作成员变量：Person.address         */</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"姓名："</span> <span class="token operator">+</span> person1<span class="token punctuation">.</span>name <span class="token operator">+</span> <span class="token string">" 年龄："</span> <span class="token operator">+</span> person1<span class="token punctuation">.</span>age <span class="token operator">+</span> <span class="token string">" 地址："</span> <span class="token operator">+</span> Person<span class="token punctuation">.</span>address<span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"姓名："</span> <span class="token operator">+</span> person2<span class="token punctuation">.</span>name <span class="token operator">+</span> <span class="token string">" 年龄："</span> <span class="token operator">+</span> person2<span class="token punctuation">.</span>age <span class="token operator">+</span> <span class="token string">" 地址："</span> <span class="token operator">+</span> Person<span class="token punctuation">.</span>address<span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"姓名："</span> <span class="token operator">+</span> person3<span class="token punctuation">.</span>name <span class="token operator">+</span> <span class="token string">" 年龄："</span> <span class="token operator">+</span> person3<span class="token punctuation">.</span>age <span class="token operator">+</span> <span class="token string">" 地址："</span> <span class="token operator">+</span> Person<span class="token punctuation">.</span>address<span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"姓名："</span> <span class="token operator">+</span> person4<span class="token punctuation">.</span>name <span class="token operator">+</span> <span class="token string">" 年龄："</span> <span class="token operator">+</span> person4<span class="token punctuation">.</span>age <span class="token operator">+</span> <span class="token string">" 地址："</span> <span class="token operator">+</span> Person<span class="token punctuation">.</span>address<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 通过类名直接调用static修饰的成员变量，此时是没有对象的</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"没有对象："</span> <span class="token operator">+</span> Person<span class="token punctuation">.</span>address<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">/*         *  Cannot make a static reference to the non-static field Person.name         *           *  将name添加static后没有报错         */</span><span class="token comment" spellcheck="true">//        System.out.println("没有对象：" + Person.name);</span>        <span class="token comment" spellcheck="true">/*         * 通过对象调用statice修饰的成员方法         *          * The static method test() from the type Person should be accessed in a static way         */</span>        <span class="token comment" spellcheck="true">// person1.testStatic();</span>        <span class="token comment" spellcheck="true">// 通过类名直接调用静态方法</span>        Person<span class="token punctuation">.</span><span class="token function">testStatic</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="总结-12"><a href="#总结-12" class="headerlink" title="总结"></a>总结</h4><pre class="line-numbers language-shell"><code class="language-shell">1、通过类名调用静态成员变量，因为静态变量与对象无关2、静态变量被所有对象共享，一处更改处处更改<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h4 id="static方法"><a href="#static方法" class="headerlink" title="static方法"></a>static方法</h4><p>static方法一般称作静态方法，由于静态方法不依赖于任何对象就可以进行访问，因此对于静态方法来说，是没有this的，因为它不依附于任何对象，既然都没有对象，就谈不上this了。并且由于这个特性，在静态方法中不能访问类的非静态成员变量和非静态成员方法，因为非静态成员方法/变量都是必须依赖具体的对象才能够被调用。</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Person</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> String name <span class="token operator">=</span> <span class="token string">"张三"</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> age<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> String address <span class="token operator">=</span> <span class="token string">"郑州"</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token function">Person</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">super</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token function">Person</span><span class="token punctuation">(</span>String name<span class="token punctuation">,</span> <span class="token keyword">int</span> age<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">super</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">=</span> age<span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 自定义static修饰的成员方法</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">testStatic</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">/*         * 静态方法不能调用非静态方法         * Cannot make a static reference to the non-static method test() from the type Person         */</span>        <span class="token comment" spellcheck="true">// test();</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"static mothed"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">/*         * 不能再静态方法中使用this关键字         *          * Cannot use this in a static context         */</span>        <span class="token comment" spellcheck="true">// this.name;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"method"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="总结-13"><a href="#总结-13" class="headerlink" title="总结"></a>总结</h4><pre class="line-numbers language-shell"><code class="language-shell">1、static修饰的方法不能访问本类中的非静态变量和方法，不能使用this2、通过类名来调用静态成员方法，工具类的应用很广泛<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h4 id="总结-14"><a href="#总结-14" class="headerlink" title="总结"></a>总结</h4><blockquote><p>1、static修饰的成员变量和方法都是对象所共享的资源，对其进行的操作回作用于所有对象。</p><p>2、static修饰的成员变量和方法依赖于类不依赖于对象，即没有对象</p><p>3、static修饰的成员变量和成员方法都可以通过类名调用，没有对象</p><p>4、静态不能调用费静态，不能使用this关键字，没有对象</p><p>5、静态变量常和final关键字搭配作为常量使用，静态方法常用于工具类</p></blockquote><table><thead><tr><th align="center">static成员变量内存分析图</th></tr></thead><tbody><tr><td align="center"><img src="http://qinjunxiang.gitee.io/Pictures/static%E6%88%90%E5%91%98%E5%8F%98%E9%87%8F%E5%86%85%E5%AD%98%E5%88%86%E6%9E%90%E5%9B%BE.jpg" alt="static成员变量内存分析图"></td></tr></tbody></table><h2 id="代码块"><a href="#代码块" class="headerlink" title="代码块"></a>代码块</h2><p>在 Java 中，使用{}括起来的代码被称为代码块，根据其位置和声明的不同，可以分为局部代码块，构造代码块，静态代码块，同步代码块(多线程)</p><h3 id="构造代码块"><a href="#构造代码块" class="headerlink" title="构造代码块"></a>构造代码块</h3><pre class="line-numbers language-java"><code class="language-java">格式：    <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h4 id="注意-1"><a href="#注意-1" class="headerlink" title="注意"></a>注意</h4><pre class="line-numbers language-shell"><code class="language-shell">1、用于给对象初始化，多个构造方法中相同的代码存放到一起，每次调用构造方法都会执行，并且在构造方法前执行2、只有创建对象时调用，类不能调用3、构造代码块可以有多个，建议只写一个<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Person</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Person构造代码块执行"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token function">Person</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Person构造方法执行"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TestPerson</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"main方法"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="静态代码块"><a href="#静态代码块" class="headerlink" title="静态代码块"></a>静态代码块</h3><pre class="line-numbers language-java"><code class="language-java">格式：    <span class="token keyword">static</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h4 id="注意-2"><a href="#注意-2" class="headerlink" title="注意"></a>注意</h4><pre class="line-numbers language-shell"><code class="language-shell">1、用于给类进行初始化，在加载的时候就执行，并且只执行一次2、优先级高于主函数3、静态代码块可以有多个，顺序执行，建议只写一个<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Person</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">static</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Person静态代码块执行"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token function">Person</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Person构造方法执行"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TestPerson</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">static</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"静态代码块1执行"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"main方法"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token keyword">static</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"静态代码块2执行"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>结果</p><pre class="line-numbers language-shell"><code class="language-shell">静态代码块1执行静态代码块2执行main方法Person静态代码块执行Person构造方法执行Person构造方法执行<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="代码块相关执行顺序"><a href="#代码块相关执行顺序" class="headerlink" title="代码块相关执行顺序"></a>代码块相关执行顺序</h3><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Father</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token function">Father</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"父类构造方法执行~~~"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"父类构造代码块执行~~~"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token keyword">static</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"父类静态代码块执行~~~"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"父类静态成员方法执行~~~"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Son</span> <span class="token keyword">extends</span> <span class="token class-name">Father</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token function">Son</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"子类构造方法执行~~~"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"子类构造代码块执行~~~"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token keyword">static</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"子类静态代码块执行~~~"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"子类静态成员方法执行~~~"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"main方法执行~~~"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">new</span> <span class="token class-name">Son</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>结果</p><pre class="line-numbers language-shell"><code class="language-shell">父类静态代码块执行~~~子类静态代码块执行~~~main方法执行~~~父类构造代码块执行~~~父类构造方法执行~~~子类构造代码块执行~~~子类构造方法执行~~~<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="面试题"><a href="#面试题" class="headerlink" title="面试题"></a>面试题</h3><p>执行顺序</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Test</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">static</span> Test test1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Test</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">static</span> Test test2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Test</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">static</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"静态代码块"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"构造代码块"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token function">Test</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"构造方法"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"main方法"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">new</span> <span class="token class-name">Test</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>结果</p><pre class="line-numbers language-shell"><code class="language-shell">构造代码块构造方法构造代码块构造方法静态代码块main方法构造代码块构造方法<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="总结-15"><a href="#总结-15" class="headerlink" title="总结"></a>总结</h3><blockquote><p>1、构造代码块用于给对象初始化，每次创建对象都会调用构造代码块，并且执行顺序在构造方法之前</p><p>2、静态代码块用于给类初始化，当类被加载的时候就会调用静态代码块（只执行一次），执行顺序在main方法之前</p></blockquote><h2 id="abstract关键字【抽象类】"><a href="#abstract关键字【抽象类】" class="headerlink" title="abstract关键字【抽象类】"></a>abstract关键字【抽象类】</h2><p>不能实例化的类就是抽象类，用 abstract 修饰</p><h3 id="构成"><a href="#构成" class="headerlink" title="构成"></a>构成</h3><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">abstract</span> <span class="token keyword">class</span> 类名 <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    成员变量    构造方法    成员方法        非抽象方法        抽象方法<span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="要求-2"><a href="#要求-2" class="headerlink" title="要求"></a>要求</h3><pre class="line-numbers language-shell"><code class="language-shell">1、抽象类和抽象方法必须用关键字 abstract 修饰2、抽象类中不一定有抽象方法，但是有抽象方法的类一定是抽象类3、abstract 修饰的方法没有方法体，且子类必须重写4、抽象类不能实例化，因为 abstract 类中有 abstract 方法5、抽象类的子类        也可以是一个抽象类，可以重写也可以不重写父类的抽象方法。        可以是一个具体类。这个类必须重写抽象类中的所有抽象方法。(可以实例化)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TestSon</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        Son son <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Son</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        son<span class="token punctuation">.</span><span class="token function">play</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 抽象类</span><span class="token keyword">abstract</span> <span class="token keyword">class</span> <span class="token class-name">Father</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    String name<span class="token punctuation">;</span>    <span class="token keyword">int</span> age<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token function">Father</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">eat</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"吃饭"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 抽象方法</span>    <span class="token keyword">abstract</span> <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">play</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">Son</span> <span class="token keyword">extends</span> <span class="token class-name">Father</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 抽象方法的重写</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">play</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"玩游戏"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="接口"><a href="#接口" class="headerlink" title="接口"></a>接口</h2><h3 id="概念-3"><a href="#概念-3" class="headerlink" title="概念"></a>概念</h3><p>接口是一系列方法的声明，是一些方法特征的集合，<strong>一个接口只有方法的特征没有方法的实现，因此这些方法可以在不同的地方被不同的类实现，而这些实现可以具有不同的行为（功能）</strong>。</p><h3 id="格式-2"><a href="#格式-2" class="headerlink" title="格式"></a>格式</h3><p>interface ：用来声明接口的关键字</p><pre class="line-numbers language-java"><code class="language-java">声明格式：    <span class="token keyword">interface</span> 接口名 <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        静态常量<span class="token punctuation">;</span>        抽象方法<span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>实现格式：    <span class="token keyword">class</span> 类名 <span class="token keyword">implements</span> 接口名 <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="特点-2"><a href="#特点-2" class="headerlink" title="特点"></a>特点</h3><pre class="line-numbers language-java"><code class="language-java"><span class="token number">1</span>、接口中的成员变量只能是静态常量，定义时必须初始化。默认修饰符：<span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span><span class="token number">2</span>、接口中没有构造方法，因为接口不能实例化对象<span class="token number">3</span>、接口中的成员方法只能是抽象方法，没有方法体。默认修饰符：<span class="token keyword">public</span> <span class="token keyword">abstract</span><span class="token number">4</span>、接口的实现类必须重写接口中方法，或者是一个抽象类<span class="token punctuation">(</span>可以重写也可以不重写接口中的方法<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="接口的声明和实现"><a href="#接口的声明和实现" class="headerlink" title="接口的声明和实现"></a>接口的声明和实现</h3><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">interface</span> <span class="token class-name">play</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 常量，缺省修饰符：public static final</span>    <span class="token keyword">int</span> time <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 抽象方法，缺省修饰符：public abstract</span>    <span class="token keyword">void</span> <span class="token function">geme</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TestInterface3</span> <span class="token keyword">implements</span> <span class="token class-name">play</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 重写接口中的方法</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">geme</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"玩游戏"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>【注意】接口的实现类必须重写接口中的方法</p><h3 id="抽象类实现接口"><a href="#抽象类实现接口" class="headerlink" title="抽象类实现接口"></a>抽象类实现接口</h3><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">interface</span> <span class="token class-name">servlet</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">void</span> <span class="token function">init</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">void</span> <span class="token function">service</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token keyword">abstract</span> <span class="token keyword">class</span> <span class="token class-name">BaseServlet</span> <span class="token keyword">implements</span> <span class="token class-name">servlet</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 重写init()方法</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">init</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"初始化"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">MyServlet</span> <span class="token keyword">extends</span> <span class="token class-name">BaseServlet</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">service</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"服务方法"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Test</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">new</span> <span class="token class-name">MyServlet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">init</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">new</span> <span class="token class-name">MyServlet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">service</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>【注意】抽象类实现接口，可以选择性重写也可以不重写接口中的方法</p><h3 id="类的接口多实现"><a href="#类的接口多实现" class="headerlink" title="类的接口多实现"></a>类的接口多实现</h3><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">interface</span> <span class="token class-name">Play</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">void</span> <span class="token function">geme</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token keyword">interface</span> <span class="token class-name">Eat</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">void</span> <span class="token function">noodles</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TestInterface3</span> <span class="token keyword">implements</span> <span class="token class-name">Play</span><span class="token punctuation">,</span> Eat <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 重写Play类中的方法</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">geme</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"玩游戏"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 重写Eat类中的方法</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">noodles</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"吃面条"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>【注意】接口的实现类必须重写所有接口中的方法</p><h3 id="接口的继承"><a href="#接口的继承" class="headerlink" title="接口的继承"></a>接口的继承</h3><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">interface</span> <span class="token class-name">Eat</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">void</span> <span class="token function">noodles</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token keyword">interface</span> <span class="token class-name">Play</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">void</span> <span class="token function">happy</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 单继承</span><span class="token keyword">interface</span> <span class="token class-name">Person</span> <span class="token keyword">extends</span> <span class="token class-name">Play</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 多继承</span><span class="token keyword">interface</span> <span class="token class-name">Animal</span> <span class="token keyword">extends</span> <span class="token class-name">Play</span><span class="token punctuation">,</span> Eat <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 实体类实现Animal接口，重写所有方法</span><span class="token keyword">class</span> <span class="token class-name">Biology</span> <span class="token keyword">implements</span> <span class="token class-name">Animal</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">happy</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"玩得开心"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">noodles</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"面条好吃"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Test</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        Biology biology <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Biology</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        biology<span class="token punctuation">.</span><span class="token function">happy</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 玩得开心</span>        biology<span class="token punctuation">.</span><span class="token function">noodles</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 面条好吃</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>【注意】接口之间可以单继承，也可以多继承</p><h3 id="jdk1-8新特性：default接口"><a href="#jdk1-8新特性：default接口" class="headerlink" title="jdk1.8新特性：default接口"></a>jdk1.8新特性：default接口</h3><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">interface</span> <span class="token class-name">Function</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">void</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">default</span> <span class="token keyword">void</span> <span class="token function">testDefault</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"default修饰的接口可以有方法体"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// default 修饰的接口可以不被重写</span><span class="token keyword">class</span> <span class="token class-name">Base</span> <span class="token keyword">implements</span> <span class="token class-name">Function</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Base类重写Function接口中的方法"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// default 修饰的接口也可以重写</span><span class="token keyword">class</span> <span class="token class-name">Boost</span> <span class="token keyword">implements</span> <span class="token class-name">Function</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Boost类重写Function接口中的方法"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testDefault</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Boost类重写Function接口中的default方法"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TestInterface2</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        Base base <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Base</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Boost boost <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Boost</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        base<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// Base类重写Function接口中的方法</span>        base<span class="token punctuation">.</span><span class="token function">testDefault</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// default修饰的接口可以有方法体</span>        boost<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// Boost类重写Function接口中的方法</span>        boost<span class="token punctuation">.</span><span class="token function">testDefault</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// Boost类重写Function接口中的default方法</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>【注意】default修饰的接口可以不被重写</p><h3 id="总结-16"><a href="#总结-16" class="headerlink" title="总结"></a>总结</h3><pre class="line-numbers language-shell"><code class="language-shell">1、接口是对类的扩展，通过接口可以让类拥有更多更强的功能2、接口中只有全局常量和抽象方法，所以不能实例化3、接口的实现类必须重写所有方法，或者是个抽象类4、接口可以多实现5、接口可以单继承，也可以多继承<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>甫子寸诗集</title>
      <link href="2020/10/11/%E7%94%AB%E5%AD%90%E5%AF%B8%E8%AF%97%E9%9B%86%E8%8A%82%E9%80%89/"/>
      <url>2020/10/11/%E7%94%AB%E5%AD%90%E5%AF%B8%E8%AF%97%E9%9B%86%E8%8A%82%E9%80%89/</url>
      
        <content type="html"><![CDATA[<p>在此处甫子寸的诗纯个人喜欢的节选。</p><p>世间有些许荒唐，不如与我兴风作浪。</p><h3 id="《天经地义》"><a href="#《天经地义》" class="headerlink" title="《天经地义》"></a>《天经地义》</h3><p>知道吗，</p><p>这世间有很多事</p><p>是不用讲道理的，</p><p>就像我喜欢你，</p><p>不用落笔，</p><p>天经地义.</p><p>​                     ———-甫子寸诗歌《天经地义》</p><h3 id="《东坡先生》"><a href="#《东坡先生》" class="headerlink" title="《东坡先生》"></a>《东坡先生》</h3><p> 大宋的明月照耀了千里，<br>却唯独照不到你。<br>你说沙洲寂寥，<br>倒也好过寒枝凄栖。<br>只寻常的入京赴考，<br>一纸策论便横空临世，<br>许是锋芒太盛？<br>竟令那山水醉翁也自叹弗如？</p><p>天才与伟人只差一个悲剧，<br>那权倾朝野的政敌沉迷变法，<br>乌台狂风起于你自由的豪尖，<br>向来墙倒众人推，<br>书生杀人不见血。<br>虎落平阳本就有趣，<br>落井下石是否更大快人心？！</p><p>自京师一贬直下到黄州，<br>耕垦隔绝新党的冷笑，<br>吹散天朝的遗风，<br>给大宋的文坛拆了细看，<br>竟再出不得如此人物，<br>上下五千年的洒脱，<br>败给谁的竹杖芒鞋。<br>把酒问天上宫阙，<br>抬眸见阴晴圆缺，<br>仙心欲归琼楼，<br>落笔却是那烟火人间。</p><p>大江东去，<br>你也随之东去，<br>雄姿英发，谈笑赤壁，<br>究竟是周郎还是你东坡居士？<br>擦去这些年的斜风细雨，<br>仍旧说着诗酒年华忘却鬓角的银发。<br>生平一点浩然气，<br>十年生死别亡妻，<br>门前的流水当真能西行？<br>如今恍惚相遇的互望无言，<br>不过又是一个明月照进松林的夜。 </p><p>​                     ———-甫子寸《东坡先生》</p><h3 id="《乡愁其四》"><a href="#《乡愁其四》" class="headerlink" title="《乡愁其四》"></a>《乡愁其四》</h3><p>我问我外公什么是乡愁，</p><p>外公没有说话，</p><p>他在眼中，</p><p>藏入一坛浊酒.</p><p>​                        ———-甫子寸《乡愁其四》</p><h3 id="《沉沦》"><a href="#《沉沦》" class="headerlink" title="《沉沦》"></a>《沉沦》</h3><p>你是我今后岁月难舍难分，</p><p>也是我荒凉宇宙明月星辰。</p><p>我爱你冰冷美艳凶险万分，</p><p>也爱你一笑嫣然撩我心魂。</p><p>题得出最美的诗文，</p><p>写不来你清透眼神。</p><p>你微微蹙眉，</p><p>使万物皆醺，英雄饮恨。</p><p>我轻轻一笑，</p><p>道茶还未凉，尚留余温。</p><p>一抹红唇，乱了方寸。</p><p>眉间一吻，我愿沉沦。</p><p>​                        ———-甫子寸《沉沦》</p><h3 id="《钓鱼人》"><a href="#《钓鱼人》" class="headerlink" title="《钓鱼人》"></a>《钓鱼人》</h3><p>这一生只想纵横，</p><p>谁又管身后的风？</p><p>​                        ———-甫子寸《钓鱼人》节选</p><h3 id="《钓鱼人》-1"><a href="#《钓鱼人》-1" class="headerlink" title="《钓鱼人》"></a>《钓鱼人》</h3><p>你不懂我的梦，</p><p>便不知我热冷</p><p>​                        ———-甫子寸《钓鱼人》节选</p><h3 id="《诗歌之路在何方》"><a href="#《诗歌之路在何方》" class="headerlink" title="《诗歌之路在何方》"></a>《诗歌之路在何方》</h3><p> 舀下一瓢星光，</p><p>浇灌我的豪肠.</p><p>​                        ———-甫子寸《诗歌之路在何方》节选</p><h3 id="《说与浮云听》"><a href="#《说与浮云听》" class="headerlink" title="《说与浮云听》"></a>《说与浮云听》</h3><p>在最失意时纵马，</p><p>在最得意处品茶.</p><p>​                        ———-甫子寸《说与浮云听》节选</p><h3 id="《说与浮云听》-1"><a href="#《说与浮云听》-1" class="headerlink" title="《说与浮云听》"></a>《说与浮云听》</h3><p>一生很长，几度春夏?<br>纸张太短，无边风雅.</p><p>​                        ———-甫子寸《说与浮云听》节选</p><h3 id="《随笔》"><a href="#《随笔》" class="headerlink" title="《随笔》"></a>《随笔》</h3><p>少年向来不识天高地厚，</p><p>放眼处皆自负才高八斗.</p><p>虽是自命风流，</p><p>倒也坦诚无忧.</p><p>我爱这样的少年，</p><p>谦和而狂妄，</p><p>骄傲又坦然.</p><p>​                        ———-甫子寸《随笔》</p><h3 id="《月下随笔》"><a href="#《月下随笔》" class="headerlink" title="《月下随笔》"></a>《月下随笔》</h3><p>我是此间少年郎，</p><p>你是天上明月光</p><p>​                        ———-甫子寸《月下随笔》节选</p><h3 id="《诗人》"><a href="#《诗人》" class="headerlink" title="《诗人》"></a>《诗人》</h3><p>我说诗人啊，</p><p>做自己的将军，</p><p>在自己的世界里统率三军.</p><p>​                        ———-甫子寸《诗人》节选</p><h3 id="《诗心》"><a href="#《诗心》" class="headerlink" title="《诗心》"></a>《诗心》</h3><p>忙过了最近的忙，</p><p>醒来已是华灯初上，</p><p>太阳无缘见我，能作陪的只剩月光.</p><p>​                        ———-甫子寸《诗心》节选</p><h3 id="《最绝伦的笔墨》"><a href="#《最绝伦的笔墨》" class="headerlink" title="《最绝伦的笔墨》"></a>《最绝伦的笔墨》</h3><p>你是我最绝伦的笔墨，</p><p>也是我诗里最美的传说.</p><p>​                        ———-甫子寸《最绝伦的笔墨》节选</p><h3 id="《无题》"><a href="#《无题》" class="headerlink" title="《无题》"></a>《无题》</h3><p>龙有逆鳞不可触，</p><p>人无傲气不可交。</p><p>​                        ———-甫子寸《无题》节选</p><h3 id="《劫》"><a href="#《劫》" class="headerlink" title="《劫》"></a>《劫》</h3><p>我于昨晚霸占了所有的月光，<br>等天亮却只想给一人写文章.</p><p>​                        ———-甫子寸《劫》节选</p><h3 id="《只是想你》"><a href="#《只是想你》" class="headerlink" title="《只是想你》"></a>《只是想你》</h3><p>这世间众生皆孤寂，<br>应怪众生未见过你。</p><p>​                        ———-甫子寸《只是想你》节选</p><h3 id="《只是想你》-1"><a href="#《只是想你》-1" class="headerlink" title="《只是想你》"></a>《只是想你》</h3><p>我扛得住所有白天的泪，</p><p>却熬不住漫漫长夜的黑。</p><p>​                        ———-甫子寸《只是想你》节选</p><h3 id="《不想》"><a href="#《不想》" class="headerlink" title="《不想》"></a>《不想》</h3><p>我其实一点也不想念，<br>和月色也能相谈甚欢</p><p>​                        ———-甫子寸《不想》节选</p><h3 id="《陷半生》"><a href="#《陷半生》" class="headerlink" title="《陷半生》"></a>《陷半生》</h3><p>误把眉目作山河，</p><p>沦陷半生未肯脱。</p><p>​                        ———-甫子寸《陷半生》节选</p><h3 id="《野望》"><a href="#《野望》" class="headerlink" title="《野望》"></a>《野望》</h3><p>野心总是在深夜开始酝酿，</p><p>等天亮又黯然收场.</p><p>​                        ———-甫子寸《野望》节选</p><h3 id="《格局》"><a href="#《格局》" class="headerlink" title="《格局》"></a>《格局》</h3><p>书生口中三寸兵，</p><p>不斩小人斩不平.</p><p>​                        ———-甫子寸《格局》节选</p><h3 id="《随笔·热爱》"><a href="#《随笔·热爱》" class="headerlink" title="《随笔·热爱》"></a>《随笔·热爱》</h3><p> 人生九分只顾开怀，<br>对世界宣泄年轻的爱。<br>留一分写诗感慨，<br>等老去为自己喝彩。<br>到那时你会不会期待，<br>我敛去一身桀骜，<br>淋着星光向你走来，<br>为你捧起世上最温柔的海。 </p><p>​                        ———-甫子寸《随笔·热爱》节选</p><h3 id="《我想把余生都送你》"><a href="#《我想把余生都送你》" class="headerlink" title="《我想把余生都送你》"></a>《我想把余生都送你》</h3><p>总有那么一天啊，</p><p>我会向那个不屈的少年告别，</p><p>柴米油盐酱醋茶，</p><p>目睹青丝成白发，</p><p>我不再心怀天下，</p><p>却只想接你回家.</p><p>​                        ———-甫子寸《我想把余生都送你》</p><h3 id="《此刻此间》"><a href="#《此刻此间》" class="headerlink" title="《此刻此间》"></a>《此刻此间》</h3><p>你如今回眸看我一眼，</p><p>满天风光尽收你眉间.</p><p>​                        ———-甫子寸《此刻此间》节选</p><h3 id="《三寸情书》"><a href="#《三寸情书》" class="headerlink" title="《三寸情书》"></a>《三寸情书》</h3><p>我说，瀚海可尽，明月可鞠，</p><p>落不得太多字句，</p><p>只为你一生眉目清举。</p><p>​                        ———-甫子寸《三寸情书》节选</p><h3 id="《青云》"><a href="#《青云》" class="headerlink" title="《青云》"></a>《青云》</h3><p>闻听书中游侠，并无轻剑快马，</p><p>只凭背井离乡，丈量山河天下。</p><p>​                        ———-甫子寸《青云》节选</p>]]></content>
      
      
      <categories>
          
          <category> 诗集 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 甫子寸诗集节选 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>电商管理系统</title>
      <link href="2020/10/10/java%E9%A1%B9%E7%9B%AE/"/>
      <url>2020/10/10/java%E9%A1%B9%E7%9B%AE/</url>
      
        <content type="html"><![CDATA[<h3 id="电商管理系统"><a href="#电商管理系统" class="headerlink" title="电商管理系统"></a>电商管理系统</h3><p>第一步：先创建四大类，分别为 商品类（Article）、商品集合类（ArticleSet）、商品管理类（ArticleManage）、商品测试类（Demo）. </p><p>代码如下：</p><h4 id="商品类"><a href="#商品类" class="headerlink" title="商品类"></a>商品类</h4><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * 商品类 * */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Article</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> String name<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> amount<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">double</span> price<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> number<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">print</span><span class="token punctuation">(</span><span class="token keyword">int</span> index<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>index<span class="token operator">+</span><span class="token string">"\t"</span><span class="token operator">+</span>name<span class="token operator">+</span><span class="token string">"\t"</span><span class="token operator">+</span>price<span class="token operator">+</span><span class="token string">"\t"</span><span class="token operator">+</span>amount<span class="token operator">+</span><span class="token string">"\t"</span><span class="token operator">+</span>number<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="商品集合类"><a href="#商品集合类" class="headerlink" title="商品集合类"></a>商品集合类</h4><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * 商品集合类 * */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ArticleSet</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    Article<span class="token punctuation">[</span><span class="token punctuation">]</span> articles<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">Article</span><span class="token punctuation">[</span><span class="token number">50</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="商品管理类"><a href="#商品管理类" class="headerlink" title="商品管理类"></a>商品管理类</h4><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>Scanner<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/** * 商品管理类 * */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ArticleManage</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    ArticleSet articleSet<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">ArticleSet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    Scanner input<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">Scanner</span><span class="token punctuation">(</span>System<span class="token punctuation">.</span>in<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * 初始化商品     */</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">initial</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        Article xiaoMi9<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">Article</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        xiaoMi9<span class="token punctuation">.</span>name<span class="token operator">=</span><span class="token string">"小米9"</span><span class="token punctuation">;</span>        xiaoMi9<span class="token punctuation">.</span>price<span class="token operator">=</span><span class="token number">2799</span><span class="token punctuation">;</span>        xiaoMi9<span class="token punctuation">.</span>amount<span class="token operator">=</span><span class="token number">60</span><span class="token punctuation">;</span>        xiaoMi9<span class="token punctuation">.</span>number<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>        Article xiaoMiMIX3<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">Article</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        xiaoMiMIX3<span class="token punctuation">.</span>name<span class="token operator">=</span><span class="token string">"小米8"</span><span class="token punctuation">;</span>        xiaoMiMIX3<span class="token punctuation">.</span>price<span class="token operator">=</span><span class="token number">2049</span><span class="token punctuation">;</span>        xiaoMiMIX3<span class="token punctuation">.</span>amount<span class="token operator">=</span><span class="token number">40</span><span class="token punctuation">;</span>        xiaoMiMIX3<span class="token punctuation">.</span>number<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>        Article redMiNote7Pro<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">Article</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        redMiNote7Pro<span class="token punctuation">.</span>name<span class="token operator">=</span><span class="token string">"Redmi7"</span><span class="token punctuation">;</span>        redMiNote7Pro<span class="token punctuation">.</span>price<span class="token operator">=</span><span class="token number">699</span><span class="token punctuation">;</span>        redMiNote7Pro<span class="token punctuation">.</span>amount<span class="token operator">=</span><span class="token number">80</span><span class="token punctuation">;</span>        redMiNote7Pro<span class="token punctuation">.</span>number<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>        Article xiaoMiPlay<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">Article</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        xiaoMiPlay<span class="token punctuation">.</span>name<span class="token operator">=</span><span class="token string">"小米6x"</span><span class="token punctuation">;</span>        xiaoMiPlay<span class="token punctuation">.</span>price<span class="token operator">=</span><span class="token number">749</span><span class="token punctuation">;</span>        xiaoMiPlay<span class="token punctuation">.</span>amount<span class="token operator">=</span><span class="token number">100</span><span class="token punctuation">;</span>        xiaoMiPlay<span class="token punctuation">.</span>number<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>        articleSet<span class="token punctuation">.</span>articles<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">=</span>xiaoMi9<span class="token punctuation">;</span>        articleSet<span class="token punctuation">.</span>articles<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">=</span>xiaoMiMIX3<span class="token punctuation">;</span>        articleSet<span class="token punctuation">.</span>articles<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token operator">=</span>redMiNote7Pro<span class="token punctuation">;</span>        articleSet<span class="token punctuation">.</span>articles<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token operator">=</span>xiaoMiPlay<span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">startMenu</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">boolean</span> flag<span class="token operator">=</span><span class="token boolean">true</span><span class="token punctuation">;</span>        <span class="token keyword">do</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"欢迎使用前程商城后台管理系统"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"*****************************************"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"1.查看商品信息"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"2.新增商品信息"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"3.删除商品信息"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"4.卖出商品信息"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"5.商品销售排行榜"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"6.退出"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"*****************************************"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Scanner sc<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">Scanner</span><span class="token punctuation">(</span>System<span class="token punctuation">.</span>in<span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"请选择要执行的操作："</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> choice<span class="token operator">=</span>sc<span class="token punctuation">.</span><span class="token function">nextInt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">switch</span> <span class="token punctuation">(</span>choice<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">case</span> <span class="token number">1</span><span class="token operator">:</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"查看商品信息"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">search</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token keyword">case</span> <span class="token number">2</span><span class="token operator">:</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"新增商品信息"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">add</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token keyword">case</span> <span class="token number">3</span><span class="token operator">:</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"删除商品信息"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">delete</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token keyword">case</span> <span class="token number">4</span><span class="token operator">:</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"卖出商品信息"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">sell</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token keyword">case</span> <span class="token number">5</span><span class="token operator">:</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"商品销售排行榜"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">leaderboard</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token keyword">case</span> <span class="token number">6</span><span class="token operator">:</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"谢谢使用！"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            flag<span class="token operator">=</span><span class="token boolean">false</span><span class="token punctuation">;</span>            <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token keyword">default</span><span class="token operator">:</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"输入不符合请重新输入："</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span> <span class="token keyword">while</span> <span class="token punctuation">(</span>flag<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * 查看商品     */</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">search</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"编号\t名称\t价格\t库存\t售出"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> articleSet<span class="token punctuation">.</span>articles<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>articleSet<span class="token punctuation">.</span>articles<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">!=</span>null<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                articleSet<span class="token punctuation">.</span>articles<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * 新增商品     */</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"请输入商品名称："</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        String name<span class="token operator">=</span>input<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"请输入价格："</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> price<span class="token operator">=</span>input<span class="token punctuation">.</span><span class="token function">nextInt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"请输入库存："</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> amount<span class="token operator">=</span>input<span class="token punctuation">.</span><span class="token function">nextInt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Article article<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">Article</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        article<span class="token punctuation">.</span>name<span class="token operator">=</span>name<span class="token punctuation">;</span>        article<span class="token punctuation">.</span>price<span class="token operator">=</span>price<span class="token punctuation">;</span>        article<span class="token punctuation">.</span>amount<span class="token operator">=</span>amount<span class="token punctuation">;</span>        article<span class="token punctuation">.</span>number<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> articleSet<span class="token punctuation">.</span>articles<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>articleSet<span class="token punctuation">.</span>articles<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">==</span>null<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                articleSet<span class="token punctuation">.</span>articles<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">=</span>article<span class="token punctuation">;</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * 删除商品     */</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">delete</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"请输入商品编号："</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">boolean</span> flag<span class="token operator">=</span><span class="token boolean">true</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> card<span class="token operator">=</span>input<span class="token punctuation">.</span><span class="token function">nextInt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> articleSet<span class="token punctuation">.</span>articles<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>articleSet<span class="token punctuation">.</span>articles<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">!=</span>null<span class="token operator">&amp;&amp;</span><span class="token punctuation">(</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">==</span>card<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                <span class="token keyword">int</span> j<span class="token operator">=</span>i<span class="token punctuation">;</span>                <span class="token keyword">while</span> <span class="token punctuation">(</span>articleSet<span class="token punctuation">.</span>articles<span class="token punctuation">[</span>j<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">!=</span>null<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                    articleSet<span class="token punctuation">.</span>articles<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">=</span>articleSet<span class="token punctuation">.</span>articles<span class="token punctuation">[</span>j<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>                    j<span class="token operator">++</span><span class="token punctuation">;</span>                <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>                articleSet<span class="token punctuation">.</span>articles<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">=</span>null<span class="token punctuation">;</span>                flag<span class="token operator">=</span><span class="token boolean">true</span><span class="token punctuation">;</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>         <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>flag<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"删除成功！"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token keyword">else</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"删除失败，请重新操作！"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * 销售业务     */</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">sell</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"请输入你要卖出的商品名称："</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        String name<span class="token operator">=</span>input<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">boolean</span> flag<span class="token operator">=</span><span class="token boolean">true</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> articleSet<span class="token punctuation">.</span>articles<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>articleSet<span class="token punctuation">.</span>articles<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">!=</span>null<span class="token operator">&amp;&amp;</span>articleSet<span class="token punctuation">.</span>articles<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>name<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"请输入你要卖出的数量"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">int</span> number<span class="token operator">=</span>input<span class="token punctuation">.</span><span class="token function">nextInt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>number<span class="token operator">&lt;=</span>articleSet<span class="token punctuation">.</span>articles<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>amount<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                    articleSet<span class="token punctuation">.</span>articles<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>number<span class="token operator">=</span>articleSet<span class="token punctuation">.</span>articles<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>number<span class="token operator">+</span>number<span class="token punctuation">;</span>                    articleSet<span class="token punctuation">.</span>articles<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>amount<span class="token operator">=</span>articleSet<span class="token punctuation">.</span>articles<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>amount<span class="token operator">-</span>number<span class="token punctuation">;</span>                    flag<span class="token operator">=</span><span class="token boolean">true</span><span class="token punctuation">;</span>                <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span> <span class="token keyword">else</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"商品数量不够，请抓紧进货！"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    flag<span class="token operator">=</span><span class="token boolean">false</span><span class="token punctuation">;</span>                <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token keyword">else</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                flag<span class="token operator">=</span><span class="token boolean">false</span><span class="token punctuation">;</span>            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>flag<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"卖出商品成功！"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span> <span class="token keyword">else</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"卖出商品失败！"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * 商品销售排行榜     */</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">leaderboard</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        Article<span class="token punctuation">[</span><span class="token punctuation">]</span> articles <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Article</span><span class="token punctuation">[</span><span class="token number">50</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> articles<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>articleSet<span class="token punctuation">.</span>articles<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">!=</span>null<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                articles<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">=</span>articleSet<span class="token punctuation">.</span>articles<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> articles<span class="token punctuation">.</span>length<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> articles<span class="token punctuation">.</span>length<span class="token operator">-</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>articles<span class="token punctuation">[</span>j<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                    <span class="token keyword">if</span> <span class="token punctuation">(</span>articles<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">.</span>number <span class="token operator">&lt;</span> articles<span class="token punctuation">[</span>j<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>number<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                        Article tempArticle <span class="token operator">=</span> articles<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>                        articles<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">=</span>articles<span class="token punctuation">[</span>j<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>                        articles<span class="token punctuation">[</span>j<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">=</span>tempArticle<span class="token punctuation">;</span>                    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>                <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"*************************************"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"名次\t销售数量\t商品名称"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> articles<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>articles<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">!=</span>null<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token operator">+</span><span class="token string">"\t"</span><span class="token operator">+</span>articles<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>number<span class="token operator">+</span><span class="token string">"\t"</span><span class="token operator">+</span>articles<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="商品测试类"><a href="#商品测试类" class="headerlink" title="商品测试类"></a>商品测试类</h4><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** *商品测试类 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Demo</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        ArticleManage articleManage<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">ArticleManage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        articleManage<span class="token punctuation">.</span><span class="token function">initial</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        articleManage<span class="token punctuation">.</span><span class="token function">startMenu</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> java项目 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java项目 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>博客的优化</title>
      <link href="2020/10/07/%E5%8D%9A%E5%AE%A2%E4%BC%98%E5%8C%96/"/>
      <url>2020/10/07/%E5%8D%9A%E5%AE%A2%E4%BC%98%E5%8C%96/</url>
      
        <content type="html"><![CDATA[<p>简单写一些关于优化hexo博客的内容，后续陆续补充.</p><hr><h3 id="一-添加动态标题"><a href="#一-添加动态标题" class="headerlink" title="一.添加动态标题"></a>一.添加动态标题</h3><p>在matery/layout/layout.ejs下添加如下内容.</p><pre><code>&lt;script type=&quot;text/javascript&quot;&gt;            var OriginTitile=document.title,st;             document.addEventListener(&quot;visibilitychange&quot;,function()&#123;                 document.hidden?(document.title=&quot;ヽ(●-`Д´-)ノ你要玩捉迷藏嘛&quot;,clearTimeout(st)):(document.title=&quot;(Ő∀Ő3)ノ好哦！&quot;,st=setTimeout(function()&#123;document.title=OriginTitile&#125;,3e3))                 &#125;)&lt;/script&gt;</code></pre><h3 id="二-配置音乐播放器"><a href="#二-配置音乐播放器" class="headerlink" title="二.配置音乐播放器"></a>二.配置音乐播放器</h3><p> 要支持音乐播放，在主题的 <code>_config.yml</code> 配置文件中激活music配置即可： </p><pre><code># 是否在首页显示音乐music:  enable: true  title:             # 非吸底模式有效    enable: true    show: 听听音乐  server: netease   # require music platform: netease, tencent, kugou, xiami, baidu  type: playlist    # require song, playlist, album, search, artist  id: 503838841     # require song id / playlist id / album id / search keyword  fixed: false      # 开启吸底模式  autoplay: false   # 是否自动播放  theme: &#39;#42b983&#39;  loop: &#39;all&#39;       # 音频循环播放, 可选值: &#39;all&#39;, &#39;one&#39;, &#39;none&#39;  order: &#39;random&#39;   # 音频循环顺序, 可选值: &#39;list&#39;, &#39;random&#39;  preload: &#39;auto&#39;   # 预加载，可选值: &#39;none&#39;, &#39;metadata&#39;, &#39;auto&#39;  volume: 0.7       # 默认音量，请注意播放器会记忆用户设置，用户手动设置音量后默认音量即失效  listFolded: true  # 列表默认折叠</code></pre><blockquote><p><code>server</code>可选<code>netease</code>（网易云音乐），<code>tencent</code>（QQ音乐），<code>kugou</code>（酷狗音乐），<code>xiami</code>（虾米音乐），</p><p><code>baidu</code>（百度音乐）。</p><p><code>type</code>可选<code>song</code>（歌曲），<code>playlist</code>（歌单），<code>album</code>（专辑），<code>search</code>（搜索关键字），<code>artist</code>（歌手）</p><p>id获取方法示例: 浏览器打开网易云音乐，点击我喜欢的音乐歌单，浏览器地址栏后面会有一串数字，<code>playlist</code>的<code>id</code></p><p>即为这串数字。</p></blockquote><h3 id="其它内容优化："><a href="#其它内容优化：" class="headerlink" title="其它内容优化："></a>其它内容优化：</h3><p>想查看其它优化博客的内容请移步好友的博客：</p><p><a href="https://ialoe.top/">https://ialoe.top/</a></p><p>此人博客较为详细</p>]]></content>
      
      
      <categories>
          
          <category> 博客 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 博客 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>博客</title>
      <link href="2020/10/05/%E5%88%9B%E5%BB%BA%E5%8D%9A%E5%AE%A2/"/>
      <url>2020/10/05/%E5%88%9B%E5%BB%BA%E5%8D%9A%E5%AE%A2/</url>
      
        <content type="html"><![CDATA[<p>此人比较懒惰。未填写内容</p><p>如想详细创建博客请移步另博客，链接如下：</p><p><a href="https://blog.csdn.net/sunhwee/article/details/100109805?utm_medium=distribute.pc_relevant.none-task-blog-title-2&amp;spm=1001.2101.3001.4242">https://blog.csdn.net/sunhwee/article/details/100109805?utm_medium=distribute.pc_relevant.none-task-blog-title-2&amp;spm=1001.2101.3001.4242</a></p><p>如想优化博客：</p><p><a href="https://ialoe.top/">https://ialoe.top/</a></p>]]></content>
      
      
      <categories>
          
          <category> 博客 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 博客 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java基础</title>
      <link href="2020/10/05/java%E5%9F%BA%E7%A1%80/"/>
      <url>2020/10/05/java%E5%9F%BA%E7%A1%80/</url>
      
        <content type="html"><![CDATA[<h1 id="Java基础"><a href="#Java基础" class="headerlink" title="Java基础"></a>Java基础</h1><h2 id="基础知识"><a href="#基础知识" class="headerlink" title="基础知识"></a>基础知识</h2><h3 id="java语言的特点："><a href="#java语言的特点：" class="headerlink" title="java语言的特点："></a>java语言的特点：</h3><p>​                1.跨平台（一次开发，到处运行）</p><p>​                2.面向对象（万物皆可对象）</p><h3 id="java开发环境："><a href="#java开发环境：" class="headerlink" title="java开发环境："></a>java开发环境：</h3><p>​                jdk：java开发工具包（开发人员必须安装）</p><p>​                jre：java运行环境（运行java程序必须安装）</p><p>​                注意：java程序最终是运行在jvm虚拟机上的，不同的操作系统上可以安装其对应版本的jvm，这样就实现了跨平台</p><h3 id="java类的结构"><a href="#java类的结构" class="headerlink" title="java类的结构"></a>java类的结构</h3><p>​                1.编写源文件（后缀名    .java）</p><p>​                2.编译            （后缀名    .class）</p><p>​                3.运行</p><h3 id="java类的结构-1"><a href="#java类的结构-1" class="headerlink" title="java类的结构"></a>java类的结构</h3><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> 类名<span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>​    <code>注意：main方法是java程序的入口</code></p><h3 id="语法规则"><a href="#语法规则" class="headerlink" title="语法规则"></a>语法规则</h3><p>​    输出语句</p><pre class="line-numbers language-java"><code class="language-java">System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//输出完之后不会换行</span>System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//输出完之后换行显示</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>​    转义符：</p><p>​    \n    换行，相当于输出完一句话按了回车键</p><p>​    \t    大空格，相当于Tab键</p><p>​    注释：</p><p>​    1.单行注释    //注释的内容</p><p>​    2.多行注释    /* 注释内容 */</p><p>​    变量：</p><pre class="line-numbers language-html"><code class="language-html">color=red; 内存中一块储存空间的表示<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="变量的数据类型："><a href="#变量的数据类型：" class="headerlink" title="变量的数据类型："></a>变量的数据类型：</h3><p>​    1.基本类型</p><p>​        八种基本数据类型</p><p>​        byte(1个字节) short(2个字节) int(4个字节) long(8个字节) </p><p>​        float(4个字节) double(8个字节) char(2个字节) boolean(1个字节)</p><p>​        自动转换 boolean–&gt;byte–&gt;short–&gt;int–&gt;long–&gt;float–&gt;double</p><p>​        short–&gt;float</p><p>​        自动    小–&gt;大</p><p>​        强制    大–&gt;小</p><p>​        float–&gt;int    强制    （int）12.3f</p><p>​    2.引用类型：</p><p>​        String，数组，对象，除了8种基本数据类型之外的都属于引用数据类型</p><p><strong>注意：比较相等</strong></p><ul><li><p>java基本数据类型（8种）</p><p>​    比较相等用==比较，比较不等！=</p></li><li><p>2.String</p><p>​    比较相等用equals（）方法比较内容是否相同    相同  true</p><p>不同 false，</p><p>方式：！字符串 1.equals（字符串2）</p></li></ul><h3 id="变量的命名规则"><a href="#变量的命名规则" class="headerlink" title="变量的命名规则"></a>变量的命名规则</h3><p>​    1.字母，数字，下划线，$,但是不能以数字开头，</p><p>​    2.不能与关键字重名</p><p>​    3.见名知义</p><p>​    4.多个单词组成时，第一个单词小于其余单词开头大写    如：myScore键盘接收</p><p>​        1). 初始化Scanner 对象</p><p>​        <code>Scanner input=new Scanner(System.in);</code></p><p>​        2.)在程序中导入Scanner类  在类的外面写</p><p>​        <code>import java.util.Scanner;</code></p><p>​        3.)从键盘接收数据赋值给变量</p><pre class="line-numbers language-java"><code class="language-java">    String name<span class="token operator">=</span>input<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//接收String类型的值</span>    <span class="token keyword">int</span> javaScore<span class="token operator">=</span>input<span class="token punctuation">.</span><span class="token function">nextInt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//接收int类型的值</span>    <span class="token keyword">double</span> height<span class="token operator">=</span>input<span class="token punctuation">.</span><span class="token function">nextDouble</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//接收double类型的值</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="数组："><a href="#数组：" class="headerlink" title="数组："></a>数组：</h3><h4 id="声明和使用步骤"><a href="#声明和使用步骤" class="headerlink" title="声明和使用步骤 :"></a>声明和使用步骤 :</h4><p>​            1.声明  2.分配空间  3.赋值  4.使用</p><p>​            注意: </p><p>​                声明同时分配空间: 数据类型[] 数组名=new 数据类型[数组长度];</p><p>​                数组下标从0开始  数组元素最大下标值是 length-1</p><p>​                声明的时候赋值:  数据类型[] 数组名=new 数据类型[]{值1,值2,值3,….} //注意,后面的括号中不能写长度</p><p>​                          数据类型[] 数组名={值1,值2,值3,….}//不可拆分</p><h4 id="遍历数组元素"><a href="#遍历数组元素" class="headerlink" title="遍历数组元素"></a>遍历数组元素</h4><pre class="line-numbers language-java"><code class="language-java"> <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>数组名<span class="token punctuation">.</span>length<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>数组名<span class="token punctuation">[</span>下标<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h4 id="数组的应用"><a href="#数组的应用" class="headerlink" title="数组的应用"></a>数组的应用</h4><p>​            ①    数组排序</p><p>​                            使用Arrays类sort方法排序，默认升序排列</p><p>​                            步骤：</p><p>​                            1）Arrays类导入import java.util.Arrays</p><p>​                            2）Arrays.sort（要排序的数组）；</p><p>​            ②求最大值（打擂台思想）</p><p>​                思路：</p><p>​                        1）.设置数组的一个元素为默认最大值</p><p>​                        2）.循环数组元素依次与最大值比较</p><p>​                关键代码：</p><p>​                                ```</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">int</span> max<span class="token operator">=</span>数组<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>数组名<span class="token punctuation">.</span>lenght<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>数组名<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">></span>max<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        max<span class="token operator">=</span>数组名<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>      <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>​            ③向数组中插入元素</p><p>​            实现思路</p><p>​            a)找到待插入元素的下标</p><p>​                            循环数组，当满足待插入元素大于当前数组元素的时候，终止循                环，并用变量保存当前下标</p><p>​            b)给待插入的元素腾位置</p><p>​                    从后往前移动元素    否则会元素覆盖，丢失i=lenght-1；i&gt;找到的小标值；i–    前一个的值赋值给后一个</p><p>​            c）插入元素</p><p>​                        数组名[下标]=元素值；</p><h3 id="运算符"><a href="#运算符" class="headerlink" title="运算符:"></a>运算符:</h3><ol><li><p>赋值运算符</p><p>​    符号:  =  </p></li></ol><p>​            把等号右边的值赋给左边</p><p>​            sum+=i;//sum=sum+i;</p><p>​    2.算数运算符</p><p>​        + - * /(求商)  %(求余数)  ++(自增)  –(自减)</p><p>​    3.关系运算符：</p><p>​        &gt;,&lt; ,&gt;=,&lt;=,  == (比较两个数是否相等)  !=（比较两数是否不等）        </p><p>​            注意:比较的结果用boolean 类型 的数据表示</p><p>​    4.逻辑运算符：</p><p>​         &amp;&amp;　　 ||　　！</p><h5 id="优先级"><a href="#优先级" class="headerlink" title="优先级"></a>优先级</h5><p>​    ！＞算术运算符＞关系运算符＞＆＆＞｜｜最高小括号,最低赋值运算符</p><h3 id="二-流程控制语句"><a href="#二-流程控制语句" class="headerlink" title="二.流程控制语句"></a>二.流程控制语句</h3><p>​                    流程图—&gt;表示程序的运行流程    </p><p>​                           ◇  —&gt;表示判断</p><p>​                        矩形—&gt;表示代码块</p><p>​            平行四边形—&gt;输出语句</p><p>​                圆角矩形 —&gt;开始或者结束</p><h4 id="1-选择结构"><a href="#1-选择结构" class="headerlink" title="1. 选择结构"></a>1. 选择结构</h4><p>1）简单的if选择结构</p><p>​        语法结构：</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token keyword">boolean</span>类型的值<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>       <span class="token comment" spellcheck="true">//代码块</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>2）if–else选择结构——用于两种分支判断的情形</p><p>​        语法：</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//代码块1</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token keyword">else</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//代码块2</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>3）多重if语句：用于区间连续情形</p><p>5)switch选择结构—用于判断价值</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">switch</span><span class="token punctuation">(</span>变量<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">case</span>    常量<span class="token number">1</span>：        <span class="token comment" spellcheck="true">//代码块</span>        <span class="token keyword">break</span><span class="token punctuation">;</span>    <span class="token keyword">case</span>    常量<span class="token number">2</span>：        <span class="token comment" spellcheck="true">//代码块</span>        <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>    <span class="token keyword">default</span><span class="token operator">:</span>            <span class="token comment" spellcheck="true">//代码块    </span>        <span class="token keyword">break</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h5><ol><li><p>switch小括号里的变量  —&gt;整型和字符型,jdk版本1.7以上 支持String</p></li><li><p>2.break可以省略,但是省略之后case之间会贯穿执行,直到遇到break才结束</p><p>3.各个case之间常量值不能重复的</p><p>4.default 总是在最后执行的,当前面所有的case都匹配不上时,位置不固定    </p></li></ol><h4 id="2-循环结构"><a href="#2-循环结构" class="headerlink" title="2.循环结构"></a>2.循环结构</h4><p>1)while循环—–先判断再执行</p><p>​            初始化循环变量</p><p>​            while(判断条件){</p><p>​                //循环操作  </p><p>​                更新循环变量</p><p>​            }</p><p>2)do-while—先执行再判断  </p><p>​            //定义循环变量</p><p>​            do{</p><p>​                //循环体</p><p>​                循环变量的更新</p><p>​            }while(判断条件);</p><p>3)for循环—用于固定循环次数</p><p>​            for(循环变量初始化;条件判断;循环变量更新){</p><p>​                循环体</p><p>​               }</p><p>执行顺序：同while    1.变量初始化    2.条件判断    3.循环体    4.变量更新</p><h6 id="注意：for循环中3个表达式均可省略-但是一般不要省略三种循环比较"><a href="#注意：for循环中3个表达式均可省略-但是一般不要省略三种循环比较" class="headerlink" title="注意：for循环中3个表达式均可省略,但是一般不要省略三种循环比较"></a>注意：for循环中3个表达式均可省略,但是一般不要省略三种循环比较</h6><p>顺序：</p><p>​                先判断后执行：while for</p><p>​                先执行后判断：do-while</p><h6 id="注意：（1）for循环主要用于循环次数固定"><a href="#注意：（1）for循环主要用于循环次数固定" class="headerlink" title="注意：（1）for循环主要用于循环次数固定"></a>注意：（1）for循环主要用于循环次数固定</h6><h6 id="（2）在循环条件不成立的时候，do-while至少执行一次"><a href="#（2）在循环条件不成立的时候，do-while至少执行一次" class="headerlink" title="（2）在循环条件不成立的时候，do-while至少执行一次"></a>（2）在循环条件不成立的时候，do-while至少执行一次</h6><p>4)二重循环</p><p>​            一个完整的循环结构  再嵌套另一个  </p><p>​            for(){</p><p>​              //循环体</p><p>​              for(){</p><p>​              }</p><p>​            }</p><p>​            外层循环变化一次,内层循环变化一遍</p><h4 id="3-流程控制语句"><a href="#3-流程控制语句" class="headerlink" title="3.流程控制语句"></a>3.流程控制语句</h4><p>break:</p><p>​            1)单层循环中: 终止循环，执行循环外的语句</p><p>​            2)二重循环中:用在内层循环中,只能结束内层循环,执行外层剩下的代码</p><p>continue：  </p><p>​            1)单层循环:跳过本次循环，执行下一次循环</p><p>​            2)结束本层的本次循环 执行本层下一次    </p><h6 id="解决代码中的异常"><a href="#解决代码中的异常" class="headerlink" title="解决代码中的异常:"></a>解决代码中的异常:</h6><h6 id="常见的错误信息"><a href="#常见的错误信息" class="headerlink" title="常见的错误信息:"></a>常见的错误信息:</h6><h6 id="1-The-local-局部的-variable-变量-num-may-not-have-been-可能还没有被-initialized-初始化-gt-变量尚未赋值就已经使用"><a href="#1-The-local-局部的-variable-变量-num-may-not-have-been-可能还没有被-initialized-初始化-gt-变量尚未赋值就已经使用" class="headerlink" title="1.The local(局部的) variable(变量) num may not have been(可能还没有被) initialized(初始化)===&gt;变量尚未赋值就已经使用"></a>1.The local(局部的) variable(变量) num may not have been(可能还没有被) initialized(初始化)===&gt;变量尚未赋值就已经使用</h6><h6 id="2-num-cannot-be-resolved-to-a-variable-gt-变量没有声明"><a href="#2-num-cannot-be-resolved-to-a-variable-gt-变量没有声明" class="headerlink" title="2.num cannot be resolved to a variable===&gt;变量没有声明"></a>2.num cannot be resolved to a variable===&gt;变量没有声明</h6><h6 id="3-java-util-InputMismatchException-gt-输入类型不匹配4-数组下标越界-java-lang-ArrayIndexOutOfBoundsException"><a href="#3-java-util-InputMismatchException-gt-输入类型不匹配4-数组下标越界-java-lang-ArrayIndexOutOfBoundsException" class="headerlink" title="3.java.util.InputMismatchException  ===&gt;输入类型不匹配4.数组下标越界  java.lang.ArrayIndexOutOfBoundsException"></a>3.java.util.InputMismatchException  ===&gt;输入类型不匹配4.数组下标越界  java.lang.ArrayIndexOutOfBoundsException</h6><h6 id="当访问超出了数组下标范围"><a href="#当访问超出了数组下标范围" class="headerlink" title="当访问超出了数组下标范围"></a>当访问超出了数组下标范围</h6><h6 id="Array-数组-index-下标-outof-超出了-bounds-边界-Exception-异常"><a href="#Array-数组-index-下标-outof-超出了-bounds-边界-Exception-异常" class="headerlink" title="Array 数组     index 下标   outof 超出了   bounds 边界  Exception 异常"></a>Array 数组     index 下标   outof 超出了   bounds 边界  Exception 异常</h6><p>简单的异常处理</p><p>​        input.hasNextInt()  判断用户输入的内容是否是合法整数,合法为true,否则为false</p><h5 id="注意："><a href="#注意：" class="headerlink" title="注意："></a>注意：</h5><p>​    要在变量赋值之前判断</p><p>​    程序调试  程序在我们的控制下一步一步执行</p><p>​     *    1.调试代码之前,要先分析可能出错的位置    </p><p>​     *    2.在可能出错的地方  打断点—代码执行到断点处会暂停   行号前双击</p><p>​     *    3.以debug模式启动程序  debug as—java application</p><pre><code> *    4.单步执行,查找错误(F6) &#123;程序运行到断点处才会启动调试模式&#125;</code></pre><p>​     *    5.找到错误,修改代码</p><h3 id="面向对象"><a href="#面向对象" class="headerlink" title="面向对象"></a>面向对象</h3><h4 id="一-什么叫面向对象"><a href="#一-什么叫面向对象" class="headerlink" title="一.什么叫面向对象"></a>一.什么叫面向对象</h4><p>相对于面向过程</p><p>​    在完成某件事情的时候,找到一个能完成该功能的对象,而不关心内部细节</p><p>​    如:数组排序的时候,我们只是调用了Arrays类的sort()方法就可以完成排序,但是具体是怎么实现的并没有过多的关心</p><h4 id="二-类和对象"><a href="#二-类和对象" class="headerlink" title="二.类和对象"></a>二.类和对象</h4><h5 id="1-现实中各类分类及描述"><a href="#1-现实中各类分类及描述" class="headerlink" title="1.现实中各类分类及描述"></a>1.现实中各类分类及描述</h5><p>手机:</p><p>​            属性(静态特征):    颜色,品牌,内存,处理器  </p><p>​            功能(动态行为): 打电话,发短信,上网</p><p>学生:</p><p>​            属性(静态特征) ;姓名,性别,身高,体重,学号,班级</p><p>​            功能(动态行为):学习,打代码</p><p>电脑:</p><p>​         属性(静态特征):品牌,外观,cpu,硬盘,内存</p><p>​            功能(动态行为); 开机,关机,运行各种软件</p><h5 id="2-怎么用java语言来描述现实生活中的分类"><a href="#2-怎么用java语言来描述现实生活中的分类" class="headerlink" title="2.怎么用java语言来描述现实生活中的分类"></a>2.怎么用java语言来描述现实生活中的分类</h5><p>public class 类名{</p><p>​            //属性—-描述类的静态的特征</p><p>​            String 属性名;</p><p>​            int  属性名;</p><p>​            //方法—-描述类的动态的行为</p><p>​            public void 方法名(){</p><p>​            }</p><p>​        }</p><h5 id="3-什么是对象"><a href="#3-什么是对象" class="headerlink" title="3.什么是对象"></a>3.什么是对象</h5><p>对象是用来描述客观事物的一个实,是具体的,能够看得见摸得着的</p><p>​            汽车—类     我家楼下停着的那辆白色的宝马—对象</p><p>​         *             手机—类     我的这部手机—-对象</p><p>​         *             椅子—类     我现在正坐的椅子—对象</p><p>​         *             演员—类   女演员—类     年龄是20到30岁之间的女演员 -类   迪丽热巴–对象 </p><p>​         *             作家–类   男作家—类   郭敬明–对象</p><h5 id="4-类和对象的关系"><a href="#4-类和对象的关系" class="headerlink" title="4.类和对象的关系"></a>4.类和对象的关系</h5><p>​        类定义了对象将会拥有的特征（属性）和行为（方法）——相当于图纸/模板</p><p>​        类是抽象的,对象是具体的</p><p>​        类是对象的类型,对象是类的实例</p><p>​        Car c=new Car();</p><p>​        int a=19;</p><h5 id="5-如何创建对象"><a href="#5-如何创建对象" class="headerlink" title="5.如何创建对象"></a>5.如何创建对象</h5><p>类名  对象名=new 类名();</p><h5 id="6-调用对象的属性"><a href="#6-调用对象的属性" class="headerlink" title="6.调用对象的属性"></a>6.调用对象的属性</h5><p>​    对象名.属性名;</p><h5 id="7-调用对象的方法"><a href="#7-调用对象的方法" class="headerlink" title="7.调用对象的方法"></a>7.调用对象的方法</h5><p>​    对象名.方法名();</p><h4 id="三-封装"><a href="#三-封装" class="headerlink" title="三.封装"></a>三.封装</h4><p>1.对象同时具有属性和方法两项特性</p><p>2.对象的属性和方法通常被封装在一起，共同体现事物的特性， 二者相辅相承，不能分割 </p><p>​    </p><p>​    如:一辆汽车，有完好的零件和特定的颜色还应具备开动、刹车等方法行为 </p><h4 id="四-面向对象的好处"><a href="#四-面向对象的好处" class="headerlink" title="四.面向对象的好处"></a>四.面向对象的好处</h4><p>​    1.与人类的思维习惯一致`</p><p>​    2.提高了程序的可重用性 </p><p>​    3.信息隐藏，提高了程序的可维护性和安全性  </p><h3 id="五、类的无参方法"><a href="#五、类的无参方法" class="headerlink" title="五、类的无参方法"></a>五、类的无参方法</h3><p>​    定义格式</p><p>​        public  返回值类型  方法名(){</p><p>​            //方法主体</p><p>​        }</p><h4 id="返回值类型的两种情况"><a href="#返回值类型的两种情况" class="headerlink" title="返回值类型的两种情况"></a>返回值类型的两种情况</h4><p>​        1.有具体的返回值类型    方法体最后一句话要添加return语句,返回相应类型的值</p><p>​        2.没有具体返回值类型 void  方法体中,可以不加return语句</p><p>​    注意：1.所有的数据类型,都可以作为方法的返回值类型</p><p>​    </p><p>​    2.调用带有返回值的方法的时候,一定要读返回值有所处理，要定一个相应类型的变量来接收方法的返回值</p><p>​    \3. return 的作用//1.跳出方法(方法执行到return语句就结束了)  2.返回结果</p><p>​    4.方法不能返回多个值</p><p>​    5.多个方法不能嵌套定义</p><p>​    6.方法外面不能写逻辑代码</p><h4 id="方法调用的两种情况"><a href="#方法调用的两种情况" class="headerlink" title="方法调用的两种情况"></a>方法调用的两种情况</h4><p>​    1.同类之间的方法调用  直接通过  方法名()  来调用</p><p>​    2.不同类的方法   先创建对象  通过  对象名.方法名()  来调用</p><p>方法返回值:</p><p>​    有些方法在执行完成之后,要给调用方法的对象返回一个值</p><h3 id="六、变量的分类"><a href="#六、变量的分类" class="headerlink" title="六、变量的分类"></a>六、变量的分类</h3><h4 id="1-成员变量-："><a href="#1-成员变量-：" class="headerlink" title="1.成员变量 ："></a>1.成员变量 ：</h4><p>定义在类中的，属性的位置</p><p>​           本类，其他类都可以访问（现阶段来说）</p><h4 id="2-局部变量："><a href="#2-局部变量：" class="headerlink" title="2.局部变量："></a>2.局部变量：</h4><p>定义在方法中的</p><p>​           只能在  定义的变量的方法  中使用</p><p>​    变量只能在定义它的大括号的范围内使用</p><p>​    区别：</p><h4 id="1-作用范围"><a href="#1-作用范围" class="headerlink" title="1.作用范围"></a>1.作用范围</h4><h4 id="2-初始值："><a href="#2-初始值：" class="headerlink" title="2.初始值："></a>2.初始值：</h4><p>​              成员变量在没有初始值的情况下，java会给默认的初始值</p><p>​              局部变量不会</p><p>​    注意：同一个方法中不能有同名的局部变量，同一个类中也不能有重复的成员变量</p><p>​       不同的方法中可以存在同名的局部变量</p><p>​       成员变量和局部变量能否定义相同的名字，可以的</p><p>​       局部变量和成员变量可以重名，但是局部变量具有更高的优先级</p><h4 id="文档注释"><a href="#文档注释" class="headerlink" title="文档注释  /**  */"></a>文档注释  /**  */</h4><p>​    注释：类，属性，方法</p><p>​    可以把注释的内容抽取出来，显示成文档，方便开发人员使用</p><p>​    @version  版本  </p><p>​    @author  作者</p><p>​    @return  返回值</p><p>​    @param  参数</p><p>​    @exception  异常情况</p><h3 id="七、带参方法"><a href="#七、带参方法" class="headerlink" title="七、带参方法"></a><strong>七、带参方法</strong></h3><p>定义</p><p>​        访问修饰符（public）  返回值类型   方法名（数据类型  变量名,数据类型 变量名….）{</p><p>​            </p><p>​        }</p><p>​        注意:方法定义时的参数列表为形参列表,说明了方法调用的时候需要几个,什么类型的参数，逗号分隔</p><p>调用：</p><h4 id="有返回值"><a href="#有返回值" class="headerlink" title="有返回值"></a>有返回值</h4><p>​            数据类型 变量=对象名.方法名（变量1,变量2,变量3,…..）；</p><p>​        无返回值</p><p>​            对象名.方法名(参数1,参数2,….);</p><p>​        注意:实参是调用方法时小括号里传递的,要和形参列表一一对应</p><p>一个方法可以有无数个参数,一个返回值</p><h4 id="数组当参数的方法"><a href="#数组当参数的方法" class="headerlink" title="数组当参数的方法"></a>数组当参数的方法</h4><p>​    定义:</p><p>​        public  返回值  方法名(数据类型[] 数组名){</p><p>​            return  值;</p><p>​        }</p><h4 id="调用"><a href="#调用" class="headerlink" title="调用:"></a>调用:</h4><p>​        数据类型[] 实参数组名=new 数据类型[长度];</p><p>​        //数组元素的赋值</p><p>​        数据类型  变量= 对象名.方法名(实参数组名);</p><h4 id="对象数组"><a href="#对象数组" class="headerlink" title="对象数组:"></a>对象数组:</h4><p>​    定义:</p><p>​        类名[] 数组名=new  类名[数组长度];  如:Student[] stus=new Student[6];</p><p>​    赋值:  1.数组名[下标]=new 类名();      如:stus[0]=new Student();    </p><p>​        数组名[下标].属性</p><p>​        数组名[下标].方法();</p><h4 id="对象作为参数"><a href="#对象作为参数" class="headerlink" title="对象作为参数"></a>对象作为参数</h4><p>​    public  返回值类型  方法名(类名  对象名){</p><p>​    }</p><p>调用:</p><p>​    //创建方法所在类的对象</p><p>​    类名  方法所在类的对象名=new 类名();</p><p>​    </p><p>​    //创建传递参数的对象</p><p>​    类名 对象名=new  类名();</p><p> 方法所在类的对象名.方法名(对象名);</p><h4 id="package-包声明语句"><a href="#package-包声明语句" class="headerlink" title="package 包声明语句"></a>package 包声明语句</h4><p>​    本类所在包的路径,以点号分割</p><p>​    必须是除了注释之外的第一条语句</p><p>import  包导入语句</p><p>​    指明要导入的类的路径,也是以点号分割</p><p>​    包名完整路径.类名 导入某一个类</p><p>​    包名完整路径.*   导入某一个包下面所有的类</p><h4 id="java中包名命名规则"><a href="#java中包名命名规则" class="headerlink" title="java中包名命名规则:"></a>java中包名命名规则:</h4><p>全小写,不能以点号开始或者结束,</p><p>​         有时前面会加上域名和项目组织名称</p><h3 id="八、字符串-String-StringBuffer"><a href="#八、字符串-String-StringBuffer" class="headerlink" title="八、字符串:  String,StringBuffer"></a>八、字符串:  String,StringBuffer</h3><p>调用字符串方法的时候要注意以下几点:</p><p> <strong>1.方法的作用  2.方法的参数  3.方法的返回值</strong></p><p>注意:java jdk 开发工具包中字符串类的定义有final 关键字,final含义是最终的意思,所以字符串对象一经创建,就不能更改</p><p>​        比如:  String s1=”hello”;  s1+=”,world”;  //s1=hello ,world</p><p>​        由于字符串的内容是不能修改的,所以这个例子里面实际上是创建了两个String对象 既:只要对字符串的内容修改一次,就会重新创建一个字符串类的对象</p><h4 id="1-创建字符串对象"><a href="#1-创建字符串对象" class="headerlink" title="1.创建字符串对象"></a><strong>1.创建字符串对象</strong></h4><p>​        String s=””;</p><p>​        String s=new String();</p><p>​        String s=new String(“hello world”);</p><h4 id="2-String类的方法"><a href="#2-String类的方法" class="headerlink" title="2.String类的方法"></a><strong>2.String类的方法</strong></h4><p>​        <strong>调用字符串类的的方法的时候,要注意,方法是否有参数,以及返回值类型</strong></p><p><strong>Ø</strong> 获取字符串长度  返回int类型</p><p>​        </p><p><strong>Ø</strong> <strong><em>equals()</em></strong>:比较字符串内容相等</p><p><strong>注意:如果用”==” 比较字符串的值,实际比较的是两个字符串的地址是否相同</strong></p><p><strong>Ø</strong> <strong><em>equalsIgnoreCase()</em></strong>比较相等时忽略大小写,用法和equals相同</p><p>​        字符串大小写转换</p><p><strong>Ø</strong> <strong><em>toLowerCase()</em></strong> 将字符串全部转化为小写</p><p><strong>Ø</strong> <strong><em>toUpperCase()</em></strong> 将字符串转换成大写</p><p><strong>注意:原来的字符串不会改变,转换之后的会作为返回值返回</strong></p><p>​            <strong>如:</strong></p><p>​            <strong>String name=”tom”;</strong></p><p>​            <strong>String s=name.toUpperCase();</strong></p><p>​            <strong>System.out.println(“name=”+name);// tom</strong></p><p>​            <strong>System.out.println(“s=”+s);//TOM</strong></p><p><strong>Ø</strong> <strong><em>字符串连接的方法</em></strong></p><p><strong></strong> <strong><em>使用”+”拼接字符串</em></strong></p><p><strong>‚</strong> <strong><em>字符串.concat(“”);</em></strong>原来的字符串不会改变,转换之后的会作为返回值返回</p><p>比如:String s=”123”;  String s1= s.concat(“111”);</p><p>​                   输出s的值为  123—-&gt;s还是为原来的值,并没有改变</p><p>​                 输出s1的值  123111—–&gt;拼接的结果是作为返回值,接收输出返回值就是拼接之后的值</p><p><strong>Ø</strong> <strong><em>字符串的提取</em></strong></p><p><strong></strong> <strong><em>字符串.indexOf()</em></strong> </p><p>参数:int或者String </p><p>​                返回值:int  代表要查找字符第一次出现的下标位置</p><p><strong>注意:字符串字符下标从0开始</strong></p><p>​                          <strong>如果没有找到,返回值-1</strong></p><p><strong>‚</strong> <strong><em>字符串.lastIndexOf();</em></strong> </p><p>参数:int或者String </p><p>​                最后一次出现的下标</p><p><strong>ƒ</strong> <strong><em>\</em>字符串.indexOf(int/String , int fromIndex);**</strong> </p><p>从fromindex位置开始的第一次出现的下标位置</p><p><strong>„</strong> <strong><em>\</em>字符串.charAt(int index)**</strong> </p><p> 返回值类型:char  </p><p>​               查找返回  对应下标的字符</p><p>截取字符串:</p><p>​            1.substring(开始的下标)  //截取从下标位置开始到字符串结束  部分的内容</p><p>​             例如:</p><p>​                String s=”郑州职业技术学院”;</p><p>​                String s1=s.substring(2);</p><p>​                System.out.println(“截取出来的字符串是:”+s1);//职业技术学院</p><p>​            2.substring(开始的下标,结束下标)  返回值:String  截取之后的</p><p>​                注意:开始下标从0 计算  结束下标从1开始计算</p><p>去前后空格  :trim()  返回值类型:String   注意:原来的字符串不改变,去掉空格的字符串以返回值的形式返回</p><p>​            String str=”  abc  “;</p><p>​            String str_new=str.trim();  或者  str=str.trim();</p><p>​            str还是带有空格的, str_new 去掉前后空格的</p><p>​        分割字符串:</p><p>​            1.split(String regx); 参数:分隔符  返回值类型:String[] 数组</p><p>​            以分隔符为界限,将字符串分割</p><p>​            2.split(String regx,int limit); 参数:分隔符,分割之后返回的数组元素的个数   返回值类型:String[] 数组</p><p>​            以分隔符为界限,将字符串分割成limit份</p><p>StringBuffer  :String类的增强版</p><p>​        优势:频繁对字符串的内容进行修改的时候要使用这个类</p><p>​        原因是:String对象一经创建,不能更改,如果修改了String对象的内容,系统会新创建一个对象来存放修改之后的内容</p><p>​            但是StringBuffer 存储的字符串的内容可以更改</p><p>​        方法:</p><p>​            1. toString();将StringBuffer的对象转换成String类型</p><p>​                //StringBuffer 和  String 类型相互转化</p><p>​                StringBuffer sb=new StringBuffer(“123”);</p><p>​                String s=sb.toString();</p><p>​        //String —&gt;StringBuffer</p><p>​                String str=”123”;</p><p>​                StringBuffer sb1=new StringBuffer(str);</p><p>​            2. append(); 在字符串后面追加内容</p><p>​            3. StringBuffer对象.insert(int index,要插入的内容); 下标从0开始</p><p>​                将str的内容插入 对象中下标是index位置</p><p>​            4.length()  返回字符串对象的长度</p><h6 id="java虚拟机：是一个可以执行java字节码文件的虚拟的进程，java源文件被编译成能被java虚拟机执行的字节码文件"><a href="#java虚拟机：是一个可以执行java字节码文件的虚拟的进程，java源文件被编译成能被java虚拟机执行的字节码文件" class="headerlink" title="java虚拟机：是一个可以执行java字节码文件的虚拟的进程，java源文件被编译成能被java虚拟机执行的字节码文件"></a>java虚拟机：是一个可以执行java字节码文件的虚拟的进程，java源文件被编译成能被java虚拟机执行的字节码文件</h6>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
