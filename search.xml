<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>博客</title>
      <link href="2020/10/05/hello-world/"/>
      <url>2020/10/05/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><pre class="line-numbers language-bash"><code class="language-bash">$ hexo new <span class="token string">"My New Post"</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><pre class="line-numbers language-bash"><code class="language-bash">$ hexo server<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><pre class="line-numbers language-bash"><code class="language-bash">$ hexo generate<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><pre class="line-numbers language-bash"><code class="language-bash">$ hexo deploy<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
      
      
      <categories>
          
          <category> 博客 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 博客 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java基础</title>
      <link href="2020/10/05/java%E5%9F%BA%E7%A1%80/"/>
      <url>2020/10/05/java%E5%9F%BA%E7%A1%80/</url>
      
        <content type="html"><![CDATA[<h1 id="Java基础"><a href="#Java基础" class="headerlink" title="Java基础"></a>Java基础</h1><h2 id="基础知识"><a href="#基础知识" class="headerlink" title="基础知识"></a>基础知识</h2><h3 id="java语言的特点："><a href="#java语言的特点：" class="headerlink" title="java语言的特点："></a>java语言的特点：</h3><p>​                1.跨平台（一次开发，到处运行）</p><p>​                2.面向对象（万物皆可对象）</p><h3 id="java开发环境："><a href="#java开发环境：" class="headerlink" title="java开发环境："></a>java开发环境：</h3><p>​                jdk：java开发工具包（开发人员必须安装）</p><p>​                jre：java运行环境（运行java程序必须安装）</p><p>​                注意：java程序最终是运行在jvm虚拟机上的，不同的操作系统上可以安装其对应版本的jvm，这样就实现了跨平台</p><h3 id="java类的结构"><a href="#java类的结构" class="headerlink" title="java类的结构"></a>java类的结构</h3><p>​                1.编写源文件（后缀名    .java）</p><p>​                2.编译            （后缀名    .class）</p><p>​                3.运行</p><h3 id="java类的结构-1"><a href="#java类的结构-1" class="headerlink" title="java类的结构"></a>java类的结构</h3><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> 类名<span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>​    <code>注意：main方法是java程序的入口</code></p><h3 id="语法规则"><a href="#语法规则" class="headerlink" title="语法规则"></a>语法规则</h3><p>​    输出语句</p><pre class="line-numbers language-java"><code class="language-java">System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//输出完之后不会换行</span>System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//输出完之后换行显示</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>​    转义符：</p><p>​    \n    换行，相当于输出完一句话按了回车键</p><p>​    \t    大空格，相当于Tab键</p><p>​    注释：</p><p>​    1.单行注释    //注释的内容</p><p>​    2.多行注释    /* 注释内容 */</p><p>​    变量：</p><pre class="line-numbers language-html"><code class="language-html">color=red; 内存中一块储存空间的表示<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="变量的数据类型："><a href="#变量的数据类型：" class="headerlink" title="变量的数据类型："></a>变量的数据类型：</h3><p>​    1.基本类型</p><p>​        八种基本数据类型</p><p>​        byte(1个字节) short(2个字节) int(4个字节) long(8个字节) </p><p>​        float(4个字节) double(8个字节) char(2个字节) boolean(1个字节)</p><p>​        自动转换 boolean–&gt;byte–&gt;short–&gt;int–&gt;long–&gt;float–&gt;double</p><p>​        short–&gt;float</p><p>​        自动    小–&gt;大</p><p>​        强制    大–&gt;小</p><p>​        float–&gt;int    强制    （int）12.3f</p><p>​    2.引用类型：</p><p>​        String，数组，对象，除了8种基本数据类型之外的都属于引用数据类型</p><p><strong>注意：比较相等</strong></p><ul><li><p>java基本数据类型（8种）</p><p>​    比较相等用==比较，比较不等！=</p></li><li><p>2.String</p><p>​    比较相等用equals（）方法比较内容是否相同    相同  true</p><p>不同 false，</p><p>方式：！字符串 1.equals（字符串2）</p></li></ul><h3 id="变量的命名规则"><a href="#变量的命名规则" class="headerlink" title="变量的命名规则"></a>变量的命名规则</h3><p>​    1.字母，数字，下划线，$,但是不能以数字开头，</p><p>​    2.不能与关键字重名</p><p>​    3.见名知义</p><p>​    4.多个单词组成时，第一个单词小于其余单词开头大写    如：myScore键盘接收</p><p>​        1). 初始化Scanner 对象</p><p>​        <code>Scanner input=new Scanner(System.in);</code></p><p>​        2.)在程序中导入Scanner类  在类的外面写</p><p>​        <code>import java.util.Scanner;</code></p><p>​        3.)从键盘接收数据赋值给变量</p><pre class="line-numbers language-java"><code class="language-java">    String name<span class="token operator">=</span>input<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//接收String类型的值</span>    <span class="token keyword">int</span> javaScore<span class="token operator">=</span>input<span class="token punctuation">.</span><span class="token function">nextInt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//接收int类型的值</span>    <span class="token keyword">double</span> height<span class="token operator">=</span>input<span class="token punctuation">.</span><span class="token function">nextDouble</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//接收double类型的值</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="数组："><a href="#数组：" class="headerlink" title="数组："></a>数组：</h3><h4 id="声明和使用步骤"><a href="#声明和使用步骤" class="headerlink" title="声明和使用步骤 :"></a>声明和使用步骤 :</h4><p>​            1.声明  2.分配空间  3.赋值  4.使用</p><p>​            注意: </p><p>​                声明同时分配空间: 数据类型[] 数组名=new 数据类型[数组长度];</p><p>​                数组下标从0开始  数组元素最大下标值是 length-1</p><p>​                声明的时候赋值:  数据类型[] 数组名=new 数据类型[]{值1,值2,值3,….} //注意,后面的括号中不能写长度</p><p>​                          数据类型[] 数组名={值1,值2,值3,….}//不可拆分</p><h4 id="遍历数组元素"><a href="#遍历数组元素" class="headerlink" title="遍历数组元素"></a>遍历数组元素</h4><pre class="line-numbers language-java"><code class="language-java"> <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>数组名<span class="token punctuation">.</span>length<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>数组名<span class="token punctuation">[</span>下标<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h4 id="数组的应用"><a href="#数组的应用" class="headerlink" title="数组的应用"></a>数组的应用</h4><p>​            ①    数组排序</p><p>​                            使用Arrays类sort方法排序，默认升序排列</p><p>​                            步骤：</p><p>​                            1）Arrays类导入import java.util.Arrays</p><p>​                            2）Arrays.sort（要排序的数组）；</p><p>​            ②求最大值（打擂台思想）</p><p>​                思路：</p><p>​                        1）.设置数组的一个元素为默认最大值</p><p>​                        2）.循环数组元素依次与最大值比较</p><p>​                关键代码：</p><p>​                                ```</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">int</span> max<span class="token operator">=</span>数组<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>数组名<span class="token punctuation">.</span>lenght<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>数组名<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">></span>max<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        max<span class="token operator">=</span>数组名<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>      <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>​            ③向数组中插入元素</p><p>​            实现思路</p><p>​            a)找到待插入元素的下标</p><p>​                            循环数组，当满足待插入元素大于当前数组元素的时候，终止循                环，并用变量保存当前下标</p><p>​            b)给待插入的元素腾位置</p><p>​                    从后往前移动元素    否则会元素覆盖，丢失i=lenght-1；i&gt;找到的小标值；i–    前一个的值赋值给后一个</p><p>​            c）插入元素</p><p>​                        数组名[下标]=元素值；</p><h3 id="运算符"><a href="#运算符" class="headerlink" title="运算符:"></a>运算符:</h3><ol><li><p>赋值运算符</p><p>​    符号:  =  </p></li></ol><p>​            把等号右边的值赋给左边</p><p>​            sum+=i;//sum=sum+i;</p><p>​    2.算数运算符</p><p>​        + - * /(求商)  %(求余数)  ++(自增)  –(自减)</p><p>​    3.关系运算符：</p><p>​        &gt;,&lt; ,&gt;=,&lt;=,  == (比较两个数是否相等)  !=（比较两数是否不等）        </p><p>​            注意:比较的结果用boolean 类型 的数据表示</p><p>​    4.逻辑运算符：</p><p>​         &amp;&amp;　　 ||　　！</p><h5 id="优先级"><a href="#优先级" class="headerlink" title="优先级"></a>优先级</h5><p>​    ！＞算术运算符＞关系运算符＞＆＆＞｜｜最高小括号,最低赋值运算符</p><h3 id="二-流程控制语句"><a href="#二-流程控制语句" class="headerlink" title="二.流程控制语句"></a>二.流程控制语句</h3><p>​                    流程图—&gt;表示程序的运行流程    </p><p>​                           ◇  —&gt;表示判断</p><p>​                        矩形—&gt;表示代码块</p><p>​            平行四边形—&gt;输出语句</p><p>​                圆角矩形 —&gt;开始或者结束</p><h4 id="1-选择结构"><a href="#1-选择结构" class="headerlink" title="1. 选择结构"></a>1. 选择结构</h4><p>1）简单的if选择结构</p><p>​        语法结构：</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token keyword">boolean</span>类型的值<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>       <span class="token comment" spellcheck="true">//代码块</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>2）if–else选择结构——用于两种分支判断的情形</p><p>​        语法：</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//代码块1</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token keyword">else</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//代码块2</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>3）多重if语句：用于区间连续情形</p><p>5)switch选择结构—用于判断价值</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">switch</span><span class="token punctuation">(</span>变量<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">case</span>    常量<span class="token number">1</span>：        <span class="token comment" spellcheck="true">//代码块</span>        <span class="token keyword">break</span><span class="token punctuation">;</span>    <span class="token keyword">case</span>    常量<span class="token number">2</span>：        <span class="token comment" spellcheck="true">//代码块</span>        <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>    <span class="token keyword">default</span><span class="token operator">:</span>            <span class="token comment" spellcheck="true">//代码块    </span>        <span class="token keyword">break</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h5><ol><li><p>switch小括号里的变量  —&gt;整型和字符型,jdk版本1.7以上 支持String</p></li><li><p>2.break可以省略,但是省略之后case之间会贯穿执行,直到遇到break才结束</p><p>3.各个case之间常量值不能重复的</p><p>4.default 总是在最后执行的,当前面所有的case都匹配不上时,位置不固定    </p></li></ol><h4 id="2-循环结构"><a href="#2-循环结构" class="headerlink" title="2.循环结构"></a>2.循环结构</h4><p>1)while循环—–先判断再执行</p><p>​            初始化循环变量</p><p>​            while(判断条件){</p><p>​                //循环操作  </p><p>​                更新循环变量</p><p>​            }</p><p>2)do-while—先执行再判断  </p><p>​            //定义循环变量</p><p>​            do{</p><p>​                //循环体</p><p>​                循环变量的更新</p><p>​            }while(判断条件);</p><p>3)for循环—用于固定循环次数</p><p>​            for(循环变量初始化;条件判断;循环变量更新){</p><p>​                循环体</p><p>​               }</p><p>执行顺序：同while    1.变量初始化    2.条件判断    3.循环体    4.变量更新</p><h6 id="注意：for循环中3个表达式均可省略-但是一般不要省略三种循环比较"><a href="#注意：for循环中3个表达式均可省略-但是一般不要省略三种循环比较" class="headerlink" title="注意：for循环中3个表达式均可省略,但是一般不要省略三种循环比较"></a>注意：for循环中3个表达式均可省略,但是一般不要省略三种循环比较</h6><p>顺序：</p><p>​                先判断后执行：while for</p><p>​                先执行后判断：do-while</p><h6 id="注意：（1）for循环主要用于循环次数固定"><a href="#注意：（1）for循环主要用于循环次数固定" class="headerlink" title="注意：（1）for循环主要用于循环次数固定"></a>注意：（1）for循环主要用于循环次数固定</h6><h6 id="（2）在循环条件不成立的时候，do-while至少执行一次"><a href="#（2）在循环条件不成立的时候，do-while至少执行一次" class="headerlink" title="（2）在循环条件不成立的时候，do-while至少执行一次"></a>（2）在循环条件不成立的时候，do-while至少执行一次</h6><p>4)二重循环</p><p>​            一个完整的循环结构  再嵌套另一个  </p><p>​            for(){</p><p>​              //循环体</p><p>​              for(){</p><p>​              }</p><p>​            }</p><p>​            外层循环变化一次,内层循环变化一遍</p><h4 id="3-流程控制语句"><a href="#3-流程控制语句" class="headerlink" title="3.流程控制语句"></a>3.流程控制语句</h4><p>break:</p><p>​            1)单层循环中: 终止循环，执行循环外的语句</p><p>​            2)二重循环中:用在内层循环中,只能结束内层循环,执行外层剩下的代码</p><p>continue：  </p><p>​            1)单层循环:跳过本次循环，执行下一次循环</p><p>​            2)结束本层的本次循环 执行本层下一次    </p><h6 id="解决代码中的异常"><a href="#解决代码中的异常" class="headerlink" title="解决代码中的异常:"></a>解决代码中的异常:</h6><h6 id="常见的错误信息"><a href="#常见的错误信息" class="headerlink" title="常见的错误信息:"></a>常见的错误信息:</h6><h6 id="1-The-local-局部的-variable-变量-num-may-not-have-been-可能还没有被-initialized-初始化-gt-变量尚未赋值就已经使用"><a href="#1-The-local-局部的-variable-变量-num-may-not-have-been-可能还没有被-initialized-初始化-gt-变量尚未赋值就已经使用" class="headerlink" title="1.The local(局部的) variable(变量) num may not have been(可能还没有被) initialized(初始化)===&gt;变量尚未赋值就已经使用"></a>1.The local(局部的) variable(变量) num may not have been(可能还没有被) initialized(初始化)===&gt;变量尚未赋值就已经使用</h6><h6 id="2-num-cannot-be-resolved-to-a-variable-gt-变量没有声明"><a href="#2-num-cannot-be-resolved-to-a-variable-gt-变量没有声明" class="headerlink" title="2.num cannot be resolved to a variable===&gt;变量没有声明"></a>2.num cannot be resolved to a variable===&gt;变量没有声明</h6><h6 id="3-java-util-InputMismatchException-gt-输入类型不匹配4-数组下标越界-java-lang-ArrayIndexOutOfBoundsException"><a href="#3-java-util-InputMismatchException-gt-输入类型不匹配4-数组下标越界-java-lang-ArrayIndexOutOfBoundsException" class="headerlink" title="3.java.util.InputMismatchException  ===&gt;输入类型不匹配4.数组下标越界  java.lang.ArrayIndexOutOfBoundsException"></a>3.java.util.InputMismatchException  ===&gt;输入类型不匹配4.数组下标越界  java.lang.ArrayIndexOutOfBoundsException</h6><h6 id="当访问超出了数组下标范围"><a href="#当访问超出了数组下标范围" class="headerlink" title="当访问超出了数组下标范围"></a>当访问超出了数组下标范围</h6><h6 id="Array-数组-index-下标-outof-超出了-bounds-边界-Exception-异常"><a href="#Array-数组-index-下标-outof-超出了-bounds-边界-Exception-异常" class="headerlink" title="Array 数组     index 下标   outof 超出了   bounds 边界  Exception 异常"></a>Array 数组     index 下标   outof 超出了   bounds 边界  Exception 异常</h6><p>简单的异常处理</p><p>​        input.hasNextInt()  判断用户输入的内容是否是合法整数,合法为true,否则为false</p><h5 id="注意："><a href="#注意：" class="headerlink" title="注意："></a>注意：</h5><p>​    要在变量赋值之前判断</p><p>​    程序调试  程序在我们的控制下一步一步执行</p><p>​     *    1.调试代码之前,要先分析可能出错的位置    </p><p>​     *    2.在可能出错的地方  打断点—代码执行到断点处会暂停   行号前双击</p><p>​     *    3.以debug模式启动程序  debug as—java application</p><pre><code> *    4.单步执行,查找错误(F6) &#123;程序运行到断点处才会启动调试模式&#125;</code></pre><p>​     *    5.找到错误,修改代码</p><h3 id="面向对象"><a href="#面向对象" class="headerlink" title="面向对象"></a>面向对象</h3><h4 id="一-什么叫面向对象"><a href="#一-什么叫面向对象" class="headerlink" title="一.什么叫面向对象"></a>一.什么叫面向对象</h4><p>相对于面向过程</p><p>​    在完成某件事情的时候,找到一个能完成该功能的对象,而不关心内部细节</p><p>​    如:数组排序的时候,我们只是调用了Arrays类的sort()方法就可以完成排序,但是具体是怎么实现的并没有过多的关心</p><h4 id="二-类和对象"><a href="#二-类和对象" class="headerlink" title="二.类和对象"></a>二.类和对象</h4><h5 id="1-现实中各类分类及描述"><a href="#1-现实中各类分类及描述" class="headerlink" title="1.现实中各类分类及描述"></a>1.现实中各类分类及描述</h5><p>手机:</p><p>​            属性(静态特征):    颜色,品牌,内存,处理器  </p><p>​            功能(动态行为): 打电话,发短信,上网</p><p>学生:</p><p>​            属性(静态特征) ;姓名,性别,身高,体重,学号,班级</p><p>​            功能(动态行为):学习,打代码</p><p>电脑:</p><p>​         属性(静态特征):品牌,外观,cpu,硬盘,内存</p><p>​            功能(动态行为); 开机,关机,运行各种软件</p><h5 id="2-怎么用java语言来描述现实生活中的分类"><a href="#2-怎么用java语言来描述现实生活中的分类" class="headerlink" title="2.怎么用java语言来描述现实生活中的分类"></a>2.怎么用java语言来描述现实生活中的分类</h5><p>public class 类名{</p><p>​            //属性—-描述类的静态的特征</p><p>​            String 属性名;</p><p>​            int  属性名;</p><p>​            //方法—-描述类的动态的行为</p><p>​            public void 方法名(){</p><p>​            }</p><p>​        }</p><h5 id="3-什么是对象"><a href="#3-什么是对象" class="headerlink" title="3.什么是对象"></a>3.什么是对象</h5><p>对象是用来描述客观事物的一个实,是具体的,能够看得见摸得着的</p><p>​            汽车—类     我家楼下停着的那辆白色的宝马—对象</p><p>​         *             手机—类     我的这部手机—-对象</p><p>​         *             椅子—类     我现在正坐的椅子—对象</p><p>​         *             演员—类   女演员—类     年龄是20到30岁之间的女演员 -类   迪丽热巴–对象 </p><p>​         *             作家–类   男作家—类   郭敬明–对象</p><h5 id="4-类和对象的关系"><a href="#4-类和对象的关系" class="headerlink" title="4.类和对象的关系"></a>4.类和对象的关系</h5><p>​        类定义了对象将会拥有的特征（属性）和行为（方法）——相当于图纸/模板</p><p>​        类是抽象的,对象是具体的</p><p>​        类是对象的类型,对象是类的实例</p><p>​        Car c=new Car();</p><p>​        int a=19;</p><h5 id="5-如何创建对象"><a href="#5-如何创建对象" class="headerlink" title="5.如何创建对象"></a>5.如何创建对象</h5><p>类名  对象名=new 类名();</p><h5 id="6-调用对象的属性"><a href="#6-调用对象的属性" class="headerlink" title="6.调用对象的属性"></a>6.调用对象的属性</h5><p>​    对象名.属性名;</p><h5 id="7-调用对象的方法"><a href="#7-调用对象的方法" class="headerlink" title="7.调用对象的方法"></a>7.调用对象的方法</h5><p>​    对象名.方法名();</p><h4 id="三-封装"><a href="#三-封装" class="headerlink" title="三.封装"></a>三.封装</h4><p>1.对象同时具有属性和方法两项特性</p><p>2.对象的属性和方法通常被封装在一起，共同体现事物的特性， 二者相辅相承，不能分割 </p><p>​    </p><p>​    如:一辆汽车，有完好的零件和特定的颜色还应具备开动、刹车等方法行为 </p><h4 id="四-面向对象的好处"><a href="#四-面向对象的好处" class="headerlink" title="四.面向对象的好处"></a>四.面向对象的好处</h4><p>​    1.与人类的思维习惯一致`</p><p>​    2.提高了程序的可重用性 </p><p>​    3.信息隐藏，提高了程序的可维护性和安全性  </p><p>​                    </p>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
